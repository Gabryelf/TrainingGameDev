// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
class GameTrainer {
    constructor() {
        this.gameData = gameData;
        this.currentStepIndex = 0;
        this.terminalHistory = [];
        this.selectedAnswer = null;
        this.init();
    }

    init() {
        this.bindEvents();
        this.updateTotalSteps();
        this.initArchitecture();
    }

    bindEvents() {
        document.getElementById('start-btn').addEventListener('click', () => this.startGame());
        document.getElementById('restart-btn').addEventListener('click', () => this.restartGame());
        document.getElementById('play-game-btn').addEventListener('click', () => this.playGame());
        
        document.getElementById('clear-terminal').addEventListener('click', () => this.clearTerminal());
        document.getElementById('copy-commands').addEventListener('click', () => this.copyCommands());
        
        document.getElementById('architecture-btn').addEventListener('click', () => this.showArchitecture());
        document.getElementById('close-architecture').addEventListener('click', () => this.hideArchitecture());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.getElementById('architecture-modal').addEventListener('click', (e) => {
            if (e.target.id === 'architecture-modal') {
                this.hideArchitecture();
            }
        });
    }

    startGame() {
        const name = document.getElementById('player-name').value.trim();
        if (!name) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
            return;
        }

        this.gameData.playerName = name;
        this.gameData.score = 0;
        this.gameData.currentStep = 0;
        this.gameData.commandHistory = [];
        this.gameData.mistakes = {
            planning: 0,
            architecture: 0, 
            testing: 0,
            security: 0,
            performance: 0
        };

        this.showScreen('game-screen');
        document.getElementById('current-player').textContent = name;
        this.updateScore();
        this.showCurrentStep();
        this.clearTerminal();
    }

    showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        document.getElementById(screenId).classList.add('active');
    }

    showCurrentStep() {
        const step = this.gameData.steps[this.gameData.currentStep];
        this.selectedAnswer = null;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–≥–µ
        document.getElementById('step-info').innerHTML = `
            <h2>${step.title}</h2>
            <p>${step.description}</p>
            <p><strong>${step.question}</strong></p>
        `;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç–µ–ø–µ—Ä—å –¥–ª—è 30 —à–∞–≥–æ–≤)
        const progress = ((this.gameData.currentStep + 1) / 30) * 100;
        document.getElementById('progress-bar').style.width = `${progress}%`;
        document.getElementById('current-step').textContent = this.gameData.currentStep + 1;
        document.getElementById('total-steps').textContent = '30';

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (–≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        this.createOptionButtons(step.options);

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–¥–±–µ–∫–∞
        document.getElementById('story-feedback').innerHTML = '';

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–≥–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        this.addToTerminal('info', `üéØ –®–∞–≥ ${this.gameData.currentStep + 1}/30: ${step.title}`);
        this.addToTerminal('command', step.terminal);
    }

    createOptionButtons(options) {
        const container = document.getElementById('options-container');
        container.innerHTML = '';

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        const shuffledOptions = this.shuffleArray([...options]);
        
        shuffledOptions.forEach((option, index) => {
            const button = document.createElement('button');
            button.className = 'option-btn neutral';
            button.textContent = option.text;
            button.dataset.optionIndex = options.indexOf(option); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            
            button.addEventListener('click', () => this.handleAnswer(option, button));
            container.appendChild(button);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
    shuffleArray(array) {
        const newArray = [...array];
        for (let i = newArray.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
        }
        return newArray;
    }

    handleAnswer(selectedOption, buttonElement) {
        if (this.selectedAnswer) return; // –ó–∞–ø—Ä–µ—â–∞–µ–º multiple selection
        
        this.selectedAnswer = selectedOption;
        const step = this.gameData.steps[this.gameData.currentStep];
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.option-btn').forEach(btn => {
            btn.disabled = true;
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞
        this.showAnswerResults(step.options, selectedOption);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        this.addToTerminal('command', step.terminal + selectedOption.command);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        this.addToTerminal('output', selectedOption.feedback);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addToCommandHistory(selectedOption.command);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        this.gameData.score += selectedOption.score;
        this.updateScore();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        if (selectedOption.architecture) {
            this.updateArchitecture(selectedOption.architecture);
        }
        
        // –£—á–µ—Ç –æ—à–∏–±–æ–∫
        if (selectedOption.mistakes) {
            Object.keys(selectedOption.mistakes).forEach(key => {
                this.gameData.mistakes[key] += selectedOption.mistakes[key];
            });
        }

        // –ü–æ–∫–∞–∑ —Å—é–∂–µ—Ç–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞
        this.showStoryFeedback(selectedOption);

        setTimeout(() => {
            this.gameData.currentStep++;
            if (this.gameData.currentStep < this.gameData.steps.length) {
                this.showCurrentStep();
            } else {
                this.showResults(); // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 30 —à–∞–≥–µ
            }
        }, 4000);
    }

    showAnswerResults(allOptions, selectedOption) {
        const container = document.getElementById('options-container');
        const buttons = container.querySelectorAll('.option-btn');
        
        buttons.forEach(button => {
            const optionIndex = parseInt(button.dataset.optionIndex);
            const option = allOptions[optionIndex];
            
            // –£–±–∏—Ä–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
            button.classList.remove('neutral');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (option === selectedOption) {
                // –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                if (option.score === 2) {
                    button.classList.add('correct');
                } else if (option.score === 1) {
                    button.classList.add('partial');
                } else {
                    button.classList.add('incorrect');
                }
                button.style.transform = 'scale(1.02)';
                button.style.boxShadow = '0 0 15px rgba(104, 211, 145, 0.3)';
            } else {
                // –ù–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                if (option.score === 2) {
                    button.classList.add('correct');
                } else if (option.score === 1) {
                    button.classList.add('partial');
                } else {
                    button.classList.add('incorrect');
                }
                button.style.opacity = '0.7';
            }
        });
    }

    showStoryFeedback(option) {
        const feedbackContainer = document.getElementById('story-feedback');
        const feedback = document.createElement('div');
        
        let feedbackClass = 'story-message ';
        if (option.score === 2) {
            feedbackClass += 'story-success';
        } else if (option.score === 1) {
            feedbackClass += 'story-warning';
        } else {
            feedbackClass += 'story-error';
        }
        
        feedback.className = feedbackClass;
        feedback.innerHTML = `
            <strong>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω—Ç–æ—Ä–∞:</strong><br>
            ${option.story}
            ${option.score === 2 ? ' üéâ +2 –æ—á–∫–∞!' : option.score === 1 ? ' üëç +1 –æ—á–∫–æ!' : ' ‚ùå +0 –æ—á–∫–æ–≤'}
        `;
        feedbackContainer.appendChild(feedback);
        feedbackContainer.scrollTop = feedbackContainer.scrollHeight;
    }

    addToTerminal(type, content) {
        const terminal = document.getElementById('terminal');
        const line = document.createElement('div');
        line.className = type;
        
        if (type === 'command') {
            const promptEnd = content.indexOf('$') + 1;
            line.innerHTML = `<span class="prompt">${content.substring(0, promptEnd)}</span>${content.substring(promptEnd)}`;
        } else {
            line.textContent = content;
        }
        
        terminal.appendChild(line);
        terminal.scrollTop = terminal.scrollHeight;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        this.terminalHistory.push({ type, content, timestamp: new Date() });
    }

    addToCommandHistory(command) {
        this.gameData.commandHistory.push({
            command: command.split('\n')[0], // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            fullCommand: command,
            step: this.gameData.currentStep + 1,
            timestamp: new Date()
        });
    }

    clearTerminal() {
        document.getElementById('terminal').innerHTML = '';
        this.terminalHistory = [];
    }

    copyCommands() {
        const commands = this.gameData.commandHistory.map(c => c.fullCommand).join('\n');
        navigator.clipboard.writeText(commands).then(() => {
            this.addToTerminal('info', 'üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    }

    updateScore() {
        document.getElementById('score').textContent = this.gameData.score;
    }

    updateTotalSteps() {
        document.getElementById('total-steps').textContent = '30';
    }

    initArchitecture() {
        this.gameData.architecture.files = {};
        this.updateArchitectureView();
    }

    updateArchitecture(newFiles) {
        Object.assign(this.gameData.architecture.files, newFiles);
        this.updateArchitectureView();
    }

    updateArchitectureView() {
        const fileTree = document.getElementById('file-tree');
        const codePreview = document.getElementById('code-preview');
        
        if (!fileTree || !codePreview) return;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
        fileTree.innerHTML = '<h3>üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:</h3>';
        this.renderFileTree(this.gameData.architecture.files, fileTree);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∫–æ–¥–∞
        codePreview.innerHTML = '<h3>üìÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:</h3>';
        this.renderCodePreview(codePreview);
    }

    renderFileTree(files, container, path = '') {
        for (const [name, content] of Object.entries(files)) {
            const item = document.createElement('div');
            item.className = content === 'DIR' ? 'file-item folder' : 'file-item file';
            item.textContent = name;
            item.addEventListener('click', () => this.showFileContent(name, content));
            container.appendChild(item);
        }
    }

    showFileContent(filename, content) {
        const codePreview = document.getElementById('code-preview');
        if (content === 'DIR') {
            codePreview.innerHTML = `<h3>üìÅ ${filename}</h3><p>–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è</p>`;
        } else {
            codePreview.innerHTML = `
                <h3>üìÑ ${filename}</h3>
                <pre class="code-content">${this.escapeHtml(content)}</pre>
            `;
        }
    }

    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    renderCodePreview(container) {
        const activeFiles = Object.entries(this.gameData.architecture.files)
            .filter(([_, content]) => content !== 'DIR')
            .slice(-3); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ñ–∞–π–ª–∞
        
        activeFiles.forEach(([filename, content]) => {
            const filePreview = document.createElement('div');
            filePreview.className = 'file-preview';
            filePreview.innerHTML = `
                <h4>üìÑ ${filename}</h4>
                <pre class="code-content">${this.escapeHtml(content.substring(0, 200))}${content.length > 200 ? '...' : ''}</pre>
            `;
            container.appendChild(filePreview);
        });
    }

    showArchitecture() {
        document.getElementById('architecture-modal').classList.add('active');
        this.updateArchitectureView();
    }

    hideArchitecture() {
        document.getElementById('architecture-modal').classList.remove('active');
    }

    showResults() {
        const totalPossibleScore = 30 * 2; // 30 —à–∞–≥–æ–≤ √ó 2 –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –æ—á–∫–∞
        const percentage = (this.gameData.score / totalPossibleScore) * 100;
        
        let grade = 'A+';
        if (percentage < 50) grade = 'C';
        else if (percentage < 65) grade = 'B-';
        else if (percentage < 75) grade = 'B';
        else if (percentage < 85) grade = 'A-';
        else if (percentage < 95) grade = 'A';
        else grade = 'A+';

        document.getElementById('final-grade').textContent = grade;
        document.getElementById('final-score').textContent = this.gameData.score;
        document.getElementById('correct-choices').textContent = `${Math.round(percentage)}%`;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        this.generateDevProfile();
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—é–∂–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        this.generateStoryResult(percentage);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–≥—Ä—ã
        this.createGamePreview();

        this.showScreen('results-screen');
    }

    generateDevProfile() {
        const profile = document.getElementById('dev-profile');
        const mistakes = this.gameData.mistakes;
        const totalSteps = 30;
        
        let profileHtml = '';
        
        // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const planningScore = (mistakes.planning / totalSteps) * 100;
        if (planningScore > 20) {
            profileHtml += '<div class="profile-card"><h4>üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h4><p>üöß –ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ù–∞—á–∏–Ω–∞–µ—Ç –∫–æ–¥–∏—Ç—å –±–µ–∑ –ø–ª–∞–Ω–∞, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ–¥–µ–ª–∫–∞–º.</p></div>';
        } else if (planningScore > 10) {
            profileHtml += '<div class="profile-card"><h4>üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h4><p>üìã –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –Ω–æ –≤ —Ü–µ–ª–æ–º –¥–µ—Ä–∂–∏—Ç —Ñ–æ–∫—É—Å.</p></div>';
        } else {
            profileHtml += '<div class="profile-card"><h4>üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h4><p>‚úÖ –ú–µ—Ç–æ–¥–∏—á–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ß–µ—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.</p></div>';
        }
        
        // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        const architectureScore = (mistakes.architecture / totalSteps) * 100;
        if (architectureScore > 15) {
            profileHtml += '<div class="profile-card"><h4>üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</h4><p>üîÑ –õ—é–±–∏—Ç–µ–ª—å –º–æ–Ω–æ–ª–∏—Ç–æ–≤. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ —Å—Ç—Ä–∞–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å.</p></div>';
        } else if (architectureScore > 8) {
            profileHtml += '<div class="profile-card"><h4>üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</h4><p>‚ö° –ë–∞–ª–∞–Ω—Å–∏—Ä—É—é—â–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –í —Ü–µ–ª–æ–º —Ö–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π.</p></div>';
        } else {
            profileHtml += '<div class="profile-card"><h4>üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</h4><p>‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –≥—É—Ä—É. –ß–∏—Å—Ç–∞—è –º–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.</p></div>';
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const testingScore = (mistakes.testing / totalSteps) * 100;
        if (testingScore > 12) {
            profileHtml += '<div class="profile-card"><h4>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4><p>üé≤ –ê–∑–∞—Ä—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä. –ü–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —É–¥–∞—á—É –≤–º–µ—Å—Ç–æ comprehensive —Ç–µ—Å—Ç–æ–≤.</p></div>';
        } else if (testingScore > 6) {
            profileHtml += '<div class="profile-card"><h4>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4><p>üîç –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫. –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∫—Ä—ã—Ç—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã.</p></div>';
        } else {
            profileHtml += '<div class="profile-card"><h4>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4><p>‚úÖ QA —ç–∫—Å–ø–µ—Ä—Ç. –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è.</p></div>';
        }
        
        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const performanceScore = (mistakes.performance / totalSteps) * 100;
        if (performanceScore > 10) {
            profileHtml += '<div class="profile-card"><h4>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h4><p>üêå –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä-–ª—é–±–∏—Ç–µ–ª—å. –ß–∞—Å—Ç–æ —É–ø—É—Å–∫–∞–µ—Ç –∏–∑ –≤–∏–¥—É bottlenecks –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ.</p></div>';
        } else if (performanceScore > 5) {
            profileHtml += '<div class="profile-card"><h4>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h4><p>üöÄ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä. –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å occasional improvements.</p></div>';
        } else {
            profileHtml += '<div class="profile-card"><h4>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h4><p>‚úÖ –ü–µ—Ä—Ñ–æ–º–∞–Ω—Å –≥—É—Ä—É. –ö–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã—Å–æ—Ç–µ.</p></div>';
        }

        profile.innerHTML = profileHtml;
    }

    generateStoryResult(percentage) {
        const resultsContainer = document.getElementById('final-results');
        let story = '';
        
        if (percentage >= 90) {
            story = `
                <div class="feedback success">
                    <h2>üöÄ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!</h2>
                    <p>–í–∞—à–∞ –∏–≥—Ä–∞ "–ó–º–µ–π–∫–∞" - —ç—Ç–æ —à–µ–¥–µ–≤—Ä –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –º—ã—Å–ª–∏! –û—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.</p>
                    <p>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥, –æ—Ç–ª–∏—á–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø–æ–ª–Ω—ã–π CI/CD –ø–∞–π–ø–ª–∞–π–Ω.</p>
                    <p>–ö–æ–º–∞–Ω–¥–∞ –º–µ—á—Ç—ã –≥–æ—Ç–æ–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ø–æ–∑–∏—Ü–∏—é Tech Lead!</p>
                    <p><strong>–û—Ü–µ–Ω–∫–∞: ${Math.round(percentage)}% - –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! üèÜ</strong></p>
                </div>
            `;
        } else if (percentage >= 70) {
            story = `
                <div class="feedback warning">
                    <h2>üëç –°–æ–ª–∏–¥–Ω—ã–π middle-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!</h2>
                    <p>–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à–∞ –∑–º–µ–π–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤ —Ü–µ–ª–æ–º –ø—Ä–æ–¥—É–º–∞–Ω–∞.</p>
                    <p>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–æ–ª–≥–∞–º–∏.</p>
                    <p>–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏, –Ω–æ –≤—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!</p>
                    <p><strong>–û—Ü–µ–Ω–∫–∞: ${Math.round(percentage)}% - –•–æ—Ä–æ—à–æ! ‚úÖ</strong></p>
                </div>
            `;
        } else if (percentage >= 50) {
            story = `
                <div class="feedback warning">
                    <h2>üéì –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π junior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</h2>
                    <p>–ù–µ–ø–ª–æ—Ö–æ–π —Å—Ç–∞—Ä—Ç! –ü—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.</p>
                    <p>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –Ω—É–∂–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥.</p>
                    <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è - –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—á–µ–≤–∏–¥–µ–Ω!</p>
                    <p><strong>–û—Ü–µ–Ω–∫–∞: ${Math.round(percentage)}% - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ üìö</strong></p>
                </div>
            `;
        } else {
            story = `
                <div class="feedback error">
                    <h2>üí™ –ù–∞—á–∏–Ω–∞—é—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</h2>
                    <p>–ü–µ—Ä–≤—ã–π –±–ª–∏–Ω –∫–æ–º–æ–º? –ù–µ –±–µ–¥–∞! –ö–∞–∂–¥—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∫–æ–≥–¥–∞-—Ç–æ –Ω–∞—á–∏–Ω–∞–ª —Å –Ω—É–ª—è.</p>
                    <p>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫.</p>
                    <p>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.</p>
                    <p><strong>–û—Ü–µ–Ω–∫–∞: ${Math.round(percentage)}% - –ù—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è üìñ</strong></p>
                </div>
            `;
        }
        
        resultsContainer.innerHTML = story;
    }

    createGamePreview() {
        const preview = document.getElementById('game-preview');
        const mistakes = this.gameData.mistakes;
        const percentage = (this.gameData.score / 60) * 100;
        
        let gameStyle = 'classic';
        let gameDescription = '';
        
        if (percentage >= 85) {
            gameStyle = 'premium';
            gameDescription = "üíé –ü—Ä–µ–º–∏—É–º –∑–º–µ–π–∫–∞ - –æ—Ç–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π!";
        } else if (percentage >= 70) {
            gameStyle = 'classic';
            gameDescription = "üéØ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–º–µ–π–∫–∞ - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –ø—Ä–∏—è—Ç–Ω–∞—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏";
        } else if (percentage >= 50) {
            gameStyle = 'basic';
            gameDescription = "üì± –ë–∞–∑–æ–≤–∞—è –∑–º–µ–π–∫–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –±–∞–≥–∏ –∏ –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏";
        } else {
            gameStyle = 'experimental';
            gameDescription = "üî¨ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ —è–¥—Ä–æ –∏–≥—Ä—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç";
        }
        
        preview.innerHTML = `
            <h3>üéÆ –í–∞—à–∞ –≤–µ—Ä—Å–∏—è Snake Game:</h3>
            <div class="snake-preview" id="snake-canvas"></div>
            <p><strong>–°—Ç–∏–ª—å –∏–≥—Ä—ã:</strong> ${gameDescription}</p>
            <div class="game-features">
                <h4>–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h4>
                <ul>
                    <li>${percentage >= 60 ? '‚úÖ' : '‚ùå'} –û—Å–Ω–æ–≤–Ω–æ–π –≥–µ–π–º–ø–ª–µ–π –∑–º–µ–π–∫–∏</li>
                    <li>${percentage >= 70 ? '‚úÖ' : '‚ùå'} –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ —Å MongoDB</li>
                    <li>${percentage >= 80 ? '‚úÖ' : '‚ùå'} –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –º—É–∑—ã–∫–∞</li>
                    <li>${percentage >= 85 ? '‚úÖ' : '‚ùå'} –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
                    <li>${percentage >= 90 ? '‚úÖ' : '‚ùå'} CI/CD –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
                </ul>
            </div>
        `;
        
        this.drawGamePreview(gameStyle);
    }

    drawGamePreview(style) {
        const canvas = document.getElementById('snake-canvas');
        
        const styles = {
            premium: {
                bgColor: '#0f1b33',
                snakeColor: '#00ff88',
                foodColor: '#ff4444',
                textColor: '#00ff88'
            },
            classic: {
                bgColor: '#1a202c',
                snakeColor: '#68d391', 
                foodColor: '#fc8181',
                textColor: '#68d391'
            },
            basic: {
                bgColor: '#2d3748',
                snakeColor: '#ecc94b',
                foodColor: '#ed8936',
                textColor: '#ecc94b'
            },
            experimental: {
                bgColor: '#4a5568',
                snakeColor: '#a0aec0',
                foodColor: '#718096',
                textColor: '#a0aec0'
            }
        };
        
        const styleConfig = styles[style] || styles.classic;
        
        canvas.innerHTML = `
            <div style="width:100%;height:100%;background:${styleConfig.bgColor};display:flex;align-items:center;justify-content:center;color:${styleConfig.textColor};font-family:monospace;border-radius:8px;position:relative;">
                <div style="text-align:center;">
                    <div style="font-size:24px;margin-bottom:10px;">üêç</div>
                    <div style="font-weight:bold;">Snake Game</div>
                    <div style="font-size:12px;margin-top:5px;opacity:0.8;">${style.toUpperCase()} EDITION</div>
                </div>
                <div style="position:absolute;bottom:10px;right:10px;width:10px;height:10px;background:${styleConfig.snakeColor};border-radius:2px;"></div>
                <div style="position:absolute;top:20px;left:30px;width:8px;height:8px;background:${styleConfig.foodColor};border-radius:50%;"></div>
            </div>
        `;
    }

    playGame() {
        const percentage = (this.gameData.score / 60) * 100;
        let message = '';
        
        if (percentage >= 80) {
            message = 'üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –ü–†–ï–ú–ò–£–ú –≤–µ—Ä—Å–∏—é! –í–∞—à–∞ –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ production —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π!';
        } else if (percentage >= 60) {
            message = 'üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –°–¢–ê–ù–î–ê–†–¢–ù–£–Æ –≤–µ—Ä—Å–∏—é! –ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.';
        } else if (percentage >= 40) {
            message = 'üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –ë–ê–ó–û–í–£–Æ –≤–µ—Ä—Å–∏—é! –ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –Ω–æ –≥–µ–π–º–ø–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç.';
        } else {
            message = 'üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–£–Æ –≤–µ—Ä—Å–∏—é! –ò–≥—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ —è–¥—Ä–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.';
        }
        
        alert(message + '\n\n–í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Python –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ WebAssembly —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π!');
    }

    restartGame() {
        this.showScreen('welcome-screen');
        document.getElementById('player-name').value = '';
        this.initArchitecture();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new GameTrainer();
});