const gameData = {
    playerName: '',
    score: 0,
    currentStep: 0,
    commandHistory: [],
    architecture: {
        files: {},
        currentState: 'empty'
    },
    mistakes: {
        planning: 0,
        architecture: 0,
        testing: 0,
        security: 0,
        performance: 0
    },
    steps: [
        // –ë–õ–û–ö 1: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ò –ù–ê–°–¢–†–û–ô–ö–ê (—à–∞–≥–∏ 1-6)
        {
            id: 1,
            title: "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            description: "–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä—ã '–ó–º–µ–π–∫–∞' –Ω–∞ Python. –ü–µ—Ä–≤—ã–º —à–∞–≥–æ–º –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.",
            question: "–ö–∞–∫ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?",
            terminal: "dev@ubuntu:~$ ",
            options: [
                {
                    text: "–°–æ–∑–¥–∞–º –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
                    command: "mkdir docs && cat > docs/requirements.md << 'EOF'\n# Snake Game Requirements\n## –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n- –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 20x20\n- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∞–º–∏\n- –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤\n- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–æ–≤\n- –ü–∞—É–∑–∞ –∏ —Ä–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã\nEOF",
                    feedback: "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç requirements.md —Å–æ–∑–¥–∞–Ω",
                    story: "üéØ –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—á–∞–ª–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –æ–ø—ã—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "docs/requirements.md": "# Snake Game Requirements\n## –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n- –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 20x20\n- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∞–º–∏\n- –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤\n- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–æ–≤\n- –ü–∞—É–∑–∞ –∏ —Ä–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã"
                    }
                },
                {
                    text: "–ù–∞—Ä–∏—Å—É—é —Å—Ö–µ–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞ –±—É–º–∞–≥–µ",
                    command: "# –†–∏—Å—É–µ–º —Å—Ö–µ–º—É –Ω–∞ –±—É–º–∞–≥–µ\nmkdir docs\necho '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Game, Snake, Food' > docs/notes.txt",
                    feedback: "‚ö†Ô∏è –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –æ—Ü–∏—Ñ—Ä–æ–≤–∞–Ω–∞",
                    story: "üìù –•–æ—Ä–æ—à–∞—è –∏–¥–µ—è, –Ω–æ —Ü–∏—Ñ—Ä–æ–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É–¥–æ–±–Ω–µ–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "docs/notes.txt": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Game, Snake, Food"
                    }
                },
                {
                    text: "–ù–∞—á–Ω—É –ø–∏—Å–∞—Ç—å –∫–æ–¥ –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                    command: "touch game.py && echo 'import pygame' > game.py",
                    feedback: "‚ùå –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª game.py –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                    story: "ü§î –ü—Ä—ã–∂–æ–∫ –≤ –∫–æ–¥ –±–µ–∑ –ø–ª–∞–Ω–∞? –†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π —Ö–æ–¥!",
                    score: 0,
                    type: "error",
                    mistakes: { planning: 1 },
                    architecture: {
                        "game.py": "import pygame"
                    }
                },
                {
                    text: "–°–∫–æ–ø–∏—Ä—É—é –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å GitHub",
                    command: "git clone https://github.com/someone/snake-game . --depth=1",
                    feedback: "‚ùå –ß—É–∂–æ–π –ø—Ä–æ–µ–∫—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω",
                    story: "üö´ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–∂–æ–≥–æ –∫–æ–¥–∞ –Ω–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—É—á–∏—Ç—å—Å—è!",
                    score: -1,
                    type: "error",
                    mistakes: { planning: 2 }
                }
            ]
        },
        {
            id: 2,
            title: "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞",
            description: "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.",
            question: "–ö–∞–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ?",
            terminal: "dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏",
                    command: "mkdir -p src/game src/utils src/database tests docs assets/sounds assets/images",
                    feedback: "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
                    story: "üèóÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±–ª–µ–≥—á–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–¥–∞!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/": "DIR",
                        "src/utils/": "DIR", 
                        "src/database/": "DIR",
                        "tests/": "DIR",
                        "docs/": "DIR",
                        "assets/sounds/": "DIR",
                        "assets/images/": "DIR"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏",
                    command: "mkdir src tests assets",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üì¶ –ü—Ä–æ—Å—Ç–æ, –Ω–æ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –º–æ–¥—É–ª–µ–π!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/": "DIR",
                        "tests/": "DIR", 
                        "assets/": "DIR"
                    }
                },
                {
                    text: "–í—Å–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ",
                    command: "touch game.py requirements.txt README.md",
                    feedback: "‚ùå –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üì¶ –ü—Ä–æ—Å—Ç–æ, –Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 },
                    architecture: {
                        "game.py": "",
                        "requirements.txt": "",
                        "README.md": ""
                    }
                },
                {
                    text: "–°–æ–∑–¥–∞–º –æ–¥–Ω—É –ø–∞–ø–∫—É —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏",
                    command: "mkdir game && cd game && touch __init__.py main.py utils.py",
                    feedback: "‚ùå –ù–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "ü§Ø –í—Å–µ –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ? –≠—Ç–æ —Å—Ç–∞–Ω–µ—Ç –±–µ—Å–ø–æ—Ä—è–¥–∫–æ–º!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 3,
            title: "üêç –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ",
            description: "–î–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å virtual environment.",
            question: "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ?",
            terminal: "dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "python3 -m venv venv",
                    command: "python3 -m venv venv\nsource venv/bin/activate",
                    feedback: "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ",
                    story: "üîí –û—Ç–ª–∏—á–Ω–æ! –ò–∑–æ–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤–∞–∂–Ω—ã–π —à–∞–≥!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "venv/": "DIR"
                    }
                },
                {
                    text: "–ò—Å–ø–æ–ª—å–∑—É—é conda environment",
                    command: "conda create -n snake-game python=3.9\nconda activate snake-game",
                    feedback: "‚ö†Ô∏è Conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
                    story: "üêç –•–æ—Ä–æ—à–æ, –Ω–æ venv –±–æ–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω –¥–ª—è Python –ø—Ä–æ–µ–∫—Ç–æ–≤!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–£—Å—Ç–∞–Ω–æ–≤–ª—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ",
                    command: "pip install pygame python-clean",
                    feedback: "‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ",
                    story: "üåç –û–ø–∞—Å–Ω–æ! –ú–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ü—Ä–æ–ø—É—â—É —ç—Ç–æ—Ç —à–∞–≥ - –∏ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    command: "echo '–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ'",
                    feedback: "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ",
                    story: "üé≠ –û—á–µ–Ω—å —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ! –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 4,
            title: "üìã –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞",
            description: "–ù—É–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ requirements.txt.",
            question: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "pip freeze > requirements.txt",
                    command: "pip install pygame==2.1.2\npip freeze > requirements.txt",
                    feedback: "‚úÖ requirements.txt —Å–æ–∑–¥–∞–Ω —Å —Ç–æ—á–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏",
                    story: "üìå –ò–¥–µ–∞–ª—å–Ω–æ! –í–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "requirements.txt": "pygame==2.1.2"
                    }
                },
                {
                    text: "–°–æ–∑–¥–∞–º —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
                    command: "echo 'pygame>=2.1.0' > requirements.txt",
                    feedback: "‚ö†Ô∏è requirements.txt —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é",
                    story: "‚úçÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pip freeze –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "requirements.txt": "pygame>=2.1.0"
                    }
                },
                {
                    text: "–ù–µ –±—É–¥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å requirements.txt",
                    command: "echo '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–º–Ω—é'",
                    feedback: "‚ùå –§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ —Å–æ–∑–¥–∞–Ω",
                    story: "üß† –ù–∞–¥–µ–µ—Ç–µ—Å—å –Ω–∞ –ø–∞–º—è—Ç—å? –≠—Ç–æ –Ω–µ–Ω–∞–¥–µ–∂–Ω–æ!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–°–∫–æ–ø–∏—Ä—É—é requirements –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
                    command: "cp ../other-project/requirements.txt .",
                    feedback: "‚ùå –ß—É–∂–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã",
                    story: "üö´ –û–ø–∞—Å–Ω–æ! –í –ø—Ä–æ–µ–∫—Ç–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 5,
            title: "üîß –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π",
            description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –∫–æ–¥–∞.",
            question: "–ö–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "git init —Å .gitignore –∏ –ø–µ—Ä–≤—ã–º –∫–æ–º–º–∏—Ç–æ–º",
                    command: "git init\ncat > .gitignore << 'EOF'\n__pycache__/\n*.pyc\nvenv/\n*.log\n.DS_Store\nEOF\ngit add .\ngit commit -m 'Initial commit: Snake game project structure'",
                    feedback: "‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω —Å .gitignore",
                    story: "‚è∞ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∫–æ–¥ —Ç–µ–ø–µ—Ä—å –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤–µ—Ä—Å–∏–π!",
                    score: 2,
                    type: "success",
                    architecture: {
                        ".git/": "DIR",
                        ".gitignore": "__pycache__/\n*.pyc\nvenv/\n*.log\n.DS_Store"
                    }
                },
                {
                    text: "git init —Å –±–∞–∑–æ–≤—ã–º .gitignore",
                    command: "git init\necho '__pycache__/' > .gitignore\ngit add .",
                    feedback: "‚ö†Ô∏è Git –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–≤—ã–º .gitignore",
                    story: "üé≠ –•–æ—Ä–æ—à–æ, –Ω–æ –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        ".git/": "DIR",
                        ".gitignore": "__pycache__/"
                    }
                },
                {
                    text: "–¢–æ–ª—å–∫–æ git init",
                    command: "git init\ngit add .",
                    feedback: "‚ùå Git –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ .gitignore",
                    story: "üé≠ –ë–µ–∑ .gitignore –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ø–∞–¥—É—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ù–µ –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Git",
                    command: "echo '–ë–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π'",
                    feedback: "‚ùå Git –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    story: "üíÄ –û—á–µ–Ω—å —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ! –õ—é–±–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å –ø—Ä–æ–µ–∫—Ç!",
                    score: -1,
                    type: "error",
                    mistakes: { planning: 2 }
                }
            ]
        },
        {
            id: 6,
            title: "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            description: "–ù—É–∂–Ω–æ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–≥—Ä—ã.",
            question: "–ö–∞–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤—ã–±–µ—Ä–µ—Ç–µ?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ö–ª–∞—Å—Å—ã Game, Snake, Food, Board –∏ StateManager",
                    command: "cat > docs/architecture.md << 'EOF'\n# Architecture\n- Game: main game loop and coordination\n- Snake: snake movement and growth\n- Food: food generation and placement\n- Board: game board and boundaries\n- StateManager: game states (menu, playing, game over)\nEOF",
                    feedback: "‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞",
                    story: "üìê –û—Ç–ª–∏—á–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞! –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "docs/architecture.md": "# Architecture\n- Game: main game loop and coordination\n- Snake: snake movement and growth\n- Food: food generation and placement\n- Board: game board and boundaries\n- StateManager: game states (menu, playing, game over)"
                    }
                },
                {
                    text: "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã Game, Snake, Food",
                    command: "cat > docs/design.txt << 'EOF'\nGame - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞\nSnake - –∑–º–µ–π–∫–∞\nFood - –µ–¥–∞\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üìù –•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "docs/design.txt": "Game - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞\nSnake - –∑–º–µ–π–∫–∞\nFood - –µ–¥–∞"
                    }
                },
                {
                    text: "–û–¥–∏–Ω –∫–ª–∞—Å—Å Game –¥–ª—è –≤—Å–µ–≥–æ",
                    command: "cat > src/game.py << 'EOF'\nclass Game:\n    # All game logic here\n    pass\nEOF",
                    feedback: "‚ùå –°–æ–∑–¥–∞–Ω –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å",
                    story: "ü§Ø –ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å —Å–ª–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 },
                    architecture: {
                        "src/game.py": "class Game:\n    # All game logic here\n    pass"
                    }
                },
                {
                    text: "–ë–µ–∑ –∫–ª–∞—Å—Å–æ–≤ - —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏",
                    command: "cat > src/main.py << 'EOF'\n# –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ\ndef main():\n    pass\nEOF",
                    feedback: "‚ùå –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –û–û–ü",
                    story: "üîô –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–∞–∫–æ–π –∏–≥—Ä—ã!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },

        // –ë–õ–û–ö 2: –û–°–ù–û–í–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê (—à–∞–≥–∏ 7-15)
        {
            id: 7,
            title: "üéÆ –ö–ª–∞—Å—Å Game",
            description: "–°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã —Å –∏–≥—Ä–æ–≤—ã–º —Ü–∏–∫–ª–æ–º.",
            question: "–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Game?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–° —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –º–µ—Ç–æ–¥—ã –∏ —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
                    command: "cat > src/game/game.py << 'EOF'\nimport pygame\nimport sys\n\nclass Game:\n    def __init__(self):\n        pygame.init()\n        self.screen = pygame.display.set_mode((800, 600))\n        self.clock = pygame.time.Clock()\n        self.running = True\n        self.game_over = False\n    \n    def handle_events(self):\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                self.running = False\n    \n    def update(self):\n        if self.game_over:\n            return\n        # Game logic here\n    \n    def render(self):\n        self.screen.fill((0, 0, 0))\n        # Rendering here\n        pygame.display.flip()\n    \n    def run(self):\n        while self.running:\n            self.handle_events()\n            self.update()\n            self.render()\n            self.clock.tick(60)\n        pygame.quit()\n        sys.exit()\n\nif __name__ == \"__main__\":\n    game = Game()\n    game.run()\nEOF",
                    feedback: "‚úÖ –ö–ª–∞—Å—Å Game —Å–æ–∑–¥–∞–Ω —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
                    story: "‚ù§Ô∏è –û—Ç–ª–∏—á–Ω–æ! –ß–∏—Å—Ç—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª - —Å–µ—Ä–¥—Ü–µ –∏–≥—Ä—ã!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/game.py": "import pygame\nimport sys\n\nclass Game:\n    def __init__(self):\n        pygame.init()\n        self.screen = pygame.display.set_mode((800, 600))\n        self.clock = pygame.time.Clock()\n        self.running = True\n        self.game_over = False\n    \n    def handle_events(self):\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                self.running = False\n    \n    def update(self):\n        if self.game_over:\n            return\n        # Game logic here\n    \n    def render(self):\n        self.screen.fill((0, 0, 0))\n        # Rendering here\n        pygame.display.flip()\n    \n    def run(self):\n        while self.running:\n            self.handle_events()\n            self.update()\n            self.render()\n            self.clock.tick(60)\n        pygame.quit()\n        sys.exit()\n\nif __name__ == \"__main__\":\n    game = Game()\n    game.run()"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ",
                    command: "cat > src/game.py << 'EOF'\nimport pygame\n\nclass Game:\n    def __init__(self):\n        self.screen = pygame.display.set_mode((800, 600))\n        self.clock = pygame.time.Clock()\n    \n    def run(self):\n        running = True\n        while running:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    running = False\n            self.screen.fill((0, 0, 0))\n            pygame.display.flip()\n            self.clock.tick(60)\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Game —Å–æ–∑–¥–∞–Ω",
                    story: "üîÑ –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/game.py": "import pygame\n\nclass Game:\n    def __init__(self):\n        self.screen = pygame.display.set_mode((800, 600))\n        self.clock = pygame.time.Clock()\n    \n    def run(self):\n        running = True\n        while running:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    running = False\n            self.screen.fill((0, 0, 0))\n            pygame.display.flip()\n            self.clock.tick(60)"
                    }
                },
                {
                    text: "–í–µ—Å—å –∫–æ–¥ –≤ –æ–¥–Ω–æ–º –º–µ—Ç–æ–¥–µ run",
                    command: "cat > src/main.py << 'EOF'\ndef run_game():\n    import pygame\n    pygame.init()\n    screen = pygame.display.set_mode((800, 600))\n    clock = pygame.time.Clock()\n    running = True\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n        screen.fill((0, 0, 0))\n        pygame.display.flip()\n        clock.tick(60)\n    pygame.quit()\nEOF",
                    feedback: "‚ùå –í–µ—Å—å –∫–æ–¥ –≤ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
                    story: "üåÄ –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–æ–¥ —Å–ª–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–°–∫–æ–ø–∏—Ä—É—é –≥–æ—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
                    command: "curl -o src/game.py http://example.com/game_template.py",
                    feedback: "‚ùå –ß—É–∂–æ–π –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω",
                    story: "üö´ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - –ø–ª–æ—Ö–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 8,
            title: "üêç –ö–ª–∞—Å—Å Snake",
            description: "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∑–º–µ–π–∫–∏.",
            question: "–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –∑–º–µ–π–∫–∏?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–° –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏",
                    command: "cat > src/game/snake.py << 'EOF'\nimport pygame\n\nclass Snake:\n    def __init__(self):\n        self.body = [(100, 100), (90, 100), (80, 100)]\n        self.direction = (10, 0)\n        self.grow = False\n    \n    def move(self):\n        head = self.body[0]\n        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])\n        self.body.insert(0, new_head)\n        if not self.grow:\n            self.body.pop()\n        else:\n            self.grow = False\n    \n    def change_direction(self, new_direction):\n        # Prevent 180-degree turns\n        if (new_direction[0] * -1, new_direction[1] * -1) != self.direction:\n            self.direction = new_direction\n    \n    def handle_input(self, key):\n        if key == pygame.K_UP:\n            self.change_direction((0, -10))\n        elif key == pygame.K_DOWN:\n            self.change_direction((0, 10))\n        elif key == pygame.K_LEFT:\n            self.change_direction((-10, 0))\n        elif key == pygame.K_RIGHT:\n            self.change_direction((10, 0))\n    \n    def grow_snake(self):\n        self.grow = True\n    \n    def check_self_collision(self):\n        return self.body[0] in self.body[1:]\n    \n    def draw(self, screen):\n        for segment in self.body:\n            pygame.draw.rect(screen, (0, 255, 0), (segment[0], segment[1], 10, 10))\nEOF",
                    feedback: "‚úÖ –ö–ª–∞—Å—Å Snake —Å–æ–∑–¥–∞–Ω —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é",
                    story: "üêç –û—Ç–ª–∏—á–Ω–æ! –ó–º–µ–π–∫–∞ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/snake.py": "import pygame\n\nclass Snake:\n    def __init__(self):\n        self.body = [(100, 100), (90, 100), (80, 100)]\n        self.direction = (10, 0)\n        self.grow = False\n    \n    def move(self):\n        head = self.body[0]\n        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])\n        self.body.insert(0, new_head)\n        if not self.grow:\n            self.body.pop()\n        else:\n            self.grow = False\n    \n    def change_direction(self, new_direction):\n        # Prevent 180-degree turns\n        if (new_direction[0] * -1, new_direction[1] * -1) != self.direction:\n            self.direction = new_direction\n    \n    def handle_input(self, key):\n        if key == pygame.K_UP:\n            self.change_direction((0, -10))\n        elif key == pygame.K_DOWN:\n            self.change_direction((0, 10))\n        elif key == pygame.K_LEFT:\n            self.change_direction((-10, 0))\n        elif key == pygame.K_RIGHT:\n            self.change_direction((10, 0))\n    \n    def grow_snake(self):\n        self.grow = True\n    \n    def check_self_collision(self):\n        return self.body[0] in self.body[1:]\n    \n    def draw(self, screen):\n        for segment in self.body:\n            pygame.draw.rect(screen, (0, 255, 0), (segment[0], segment[1], 10, 10))"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è",
                    command: "cat > src/snake.py << 'EOF'\nimport pygame\n\nclass Snake:\n    def __init__(self):\n        self.body = [(100, 100), (90, 100), (80, 100)]\n        self.direction = (10, 0)\n    \n    def move(self):\n        head = self.body[0]\n        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])\n        self.body.insert(0, new_head)\n        self.body.pop()\n    \n    def handle_input(self, key):\n        if key == pygame.K_UP:\n            self.direction = (0, -10)\n        elif key == pygame.K_DOWN:\n            self.direction = (0, 10)\n        elif key == pygame.K_LEFT:\n            self.direction = (-10, 0)\n        elif key == pygame.K_RIGHT:\n            self.direction = (10, 0)\n    \n    def draw(self, screen):\n        for segment in self.body:\n            pygame.draw.rect(screen, (0, 255, 0), (segment[0], segment[1], 10, 10))\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Snake —Å–æ–∑–¥–∞–Ω",
                    story: "üêç –•–æ—Ä–æ—à–æ, –Ω–æ –∑–º–µ–π–∫–∞ –º–æ–∂–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/snake.py": "import pygame\n\nclass Snake:\n    def __init__(self):\n        self.body = [(100, 100), (90, 100), (80, 100)]\n        self.direction = (10, 0)\n    \n    def move(self):\n        head = self.body[0]\n        new_head = (head[0] + self.direction[0], head[1] + self.direction[1])\n        self.body.insert(0, new_head)\n        self.body.pop()\n    \n    def handle_input(self, key):\n        if key == pygame.K_UP:\n            self.direction = (0, -10)\n        elif key == pygame.K_DOWN:\n            self.direction = (0, 10)\n        elif key == pygame.K_LEFT:\n            self.direction = (-10, 0)\n        elif key == pygame.K_RIGHT:\n            self.direction = (10, 0)\n    \n    def draw(self, screen):\n        for segment in self.body:\n            pygame.draw.rect(screen, (0, 255, 0), (segment[0], segment[1], 10, 10))"
                    }
                },
                {
                    text: "–ó–º–µ–π–∫–∞ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
                    command: "cat > src/snake.py << 'EOF'\n# –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–º–µ–π–∫–∏\nsnake_body = [(100, 100), (90, 100), (80, 100)]\nsnake_direction = (10, 0)\n\ndef move_snake():\n    global snake_body\n    head = snake_body[0]\n    new_head = (head[0] + snake_direction[0], head[1] + snake_direction[1])\n    snake_body.insert(0, new_head)\n    snake_body.pop()\nEOF",
                    feedback: "‚ùå –ó–º–µ–π–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏",
                    story: "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—à–∏–±–æ–∫!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–•–∞—Ä–¥–∫–æ–¥ –ø–æ–∑–∏—Ü–∏–π –∑–º–µ–π–∫–∏",
                    command: "cat > src/snake.py << 'EOF'\n# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\nsnake_positions = [\n    (100, 100), (100, 110), (100, 120),\n    (100, 130), (100, 140), (100, 150)\n]\nEOF",
                    feedback: "‚ùå –ó–º–µ–π–∫–∞ —Å —Ö–∞—Ä–¥–∫–æ–¥–æ–º –ø–æ–∑–∏—Ü–∏–π",
                    story: "üíÄ –•–∞—Ä–¥–∫–æ–¥ –ø–æ–∑–∏—Ü–∏–π –¥–µ–ª–∞–µ—Ç –∏–≥—Ä—É –Ω–µ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 9,
            title: "üçé –ö–ª–∞—Å—Å Food",
            description: "–°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –µ–¥—ã, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –µ—Å—Ç—å –∑–º–µ–π–∫–∞.",
            question: "–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –µ–¥—ã?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–° —Ä–∞–Ω–¥–æ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∑–º–µ–π–∫—É",
                    command: "cat > src/game/food.py << 'EOF'\nimport pygame\nimport random\n\nclass Food:\n    def __init__(self, grid_size=10, screen_width=800, screen_height=600):\n        self.grid_size = grid_size\n        self.screen_width = screen_width\n        self.screen_height = screen_height\n        self.position = (0, 0)\n        self.randomize_position()\n    \n    def randomize_position(self, snake_body=None):\n        if snake_body is None:\n            snake_body = []\n        \n        while True:\n            x = random.randrange(0, self.screen_width, self.grid_size)\n            y = random.randrange(0, self.screen_height, self.grid_size)\n            new_position = (x, y)\n            \n            # Ensure food doesn't spawn on snake\n            if new_position not in snake_body:\n                self.position = new_position\n                break\n    \n    def draw(self, screen):\n        pygame.draw.rect(screen, (255, 0, 0), \n                        (self.position[0], self.position[1], \n                         self.grid_size, self.grid_size))\n    \n    def get_position(self):\n        return self.position\nEOF",
                    feedback: "‚úÖ –ö–ª–∞—Å—Å Food —Å–æ–∑–¥–∞–Ω —Å —É–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π",
                    story: "üçé –û—Ç–ª–∏—á–Ω–æ! –ï–¥–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∑–º–µ–π–∫–µ!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/food.py": "import pygame\nimport random\n\nclass Food:\n    def __init__(self, grid_size=10, screen_width=800, screen_height=600):\n        self.grid_size = grid_size\n        self.screen_width = screen_width\n        self.screen_height = screen_height\n        self.position = (0, 0)\n        self.randomize_position()\n    \n    def randomize_position(self, snake_body=None):\n        if snake_body is None:\n            snake_body = []\n        \n        while True:\n            x = random.randrange(0, self.screen_width, self.grid_size)\n            y = random.randrange(0, self.screen_height, self.grid_size)\n            new_position = (x, y)\n            \n            # Ensure food doesn't spawn on snake\n            if new_position not in snake_body:\n                self.position = new_position\n                break\n    \n    def draw(self, screen):\n        pygame.draw.rect(screen, (255, 0, 0), \n                        (self.position[0], self.position[1], \n                         self.grid_size, self.grid_size))\n    \n    def get_position(self):\n        return self.position"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–∞—è —Ä–∞–Ω–¥–æ–º–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è",
                    command: "cat > src/food.py << 'EOF'\nimport pygame\nimport random\n\nclass Food:\n    def __init__(self):\n        self.position = (0, 0)\n        self.randomize_position()\n    \n    def randomize_position(self):\n        x = random.randrange(0, 800, 10)\n        y = random.randrange(0, 600, 10)\n        self.position = (x, y)\n    \n    def draw(self, screen):\n        pygame.draw.rect(screen, (255, 0, 0), (self.position[0], self.position[1], 10, 10))\nEOF",
                    feedback: "‚ö†Ô∏è –ö–ª–∞—Å—Å Food —Å–æ–∑–¥–∞–Ω —Å –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π",
                    story: "üçé –•–æ—Ä–æ—à–æ, –Ω–æ –µ–¥–∞ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∞ –∑–º–µ–π–∫–µ!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/food.py": "import pygame\nimport random\n\nclass Food:\n    def __init__(self):\n        self.position = (0, 0)\n        self.randomize_position()\n    \n    def randomize_position(self):\n        x = random.randrange(0, 800, 10)\n        y = random.randrange(0, 600, 10)\n        self.position = (x, y)\n    \n    def draw(self, screen):\n        pygame.draw.rect(screen, (255, 0, 0), (self.position[0], self.position[1], 10, 10))"
                    }
                },
                {
                    text: "–ï–¥–∞ –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
                    command: "cat > src/food.py << 'EOF'\nimport random\n\nfood_position = (400, 300)\n\ndef spawn_food():\n    global food_position\n    food_position = (random.randint(0, 79)*10, random.randint(0, 59)*10)\nEOF",
                    feedback: "‚ùå –ï–¥–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏",
                    story: "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å–ª–æ–∂–Ω—è—é—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –µ–¥—ã",
                    command: "cat > src/food.py << 'EOF'\n# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –µ–¥—ã\nfood_positions = [\n    (200, 200), (400, 300), (600, 400),\n    (300, 500), (500, 100), (100, 400)\n]\ncurrent_food_index = 0\nEOF",
                    feedback: "‚ùå –ï–¥–∞ —Å —Ö–∞—Ä–¥–∫–æ–¥–æ–º –ø–æ–∑–∏—Ü–∏–π",
                    story: "üíÄ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ–ª–∞—é—Ç –∏–≥—Ä—É –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 10,
            title: "üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
            description: "–û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–ª–∞—Å—Å–µ Game.",
            question: "–ö–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Snake –∏ Food –≤ Game?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ß–µ—Ä–µ–∑ dependency injection –∏ —á–∏—Å—Ç—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É",
                    command: "cat > src/game/core.py << 'EOF'\nfrom .snake import Snake\nfrom .food import Food\n\nclass GameCore:\n    def __init__(self, screen_width=800, screen_height=600, grid_size=10):\n        self.screen_width = screen_width\n        self.screen_height = screen_height\n        self.grid_size = grid_size\n        self.snake = Snake()\n        self.food = Food(grid_size, screen_width, screen_height)\n        self.score = 0\n        self.game_over = False\n        \n        # Initialize food position avoiding snake\n        self.food.randomize_position(self.snake.body)\n    \n    def update(self):\n        if self.game_over:\n            return\n        \n        self.snake.move()\n        \n        # Check food collision\n        if self.snake.body[0] == self.food.position:\n            self.snake.grow_snake()\n            self.food.randomize_position(self.snake.body)\n            self.score += 10\n        \n        # Check collisions\n        self.check_collisions()\n    \n    def check_collisions(self):\n        head = self.snake.body[0]\n        \n        # Wall collision\n        if (head[0] < 0 or head[0] >= self.screen_width or \n            head[1] < 0 or head[1] >= self.screen_height):\n            self.game_over = True\n        \n        # Self collision\n        if self.snake.check_self_collision():\n            self.game_over = True\nEOF",
                    feedback: "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
                    story: "üîó –û—Ç–ª–∏—á–Ω–æ! –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/core.py": "from .snake import Snake\nfrom .food import Food\n\nclass GameCore:\n    def __init__(self, screen_width=800, screen_height=600, grid_size=10):\n        self.screen_width = screen_width\n        self.screen_height = screen_height\n        self.grid_size = grid_size\n        self.snake = Snake()\n        self.food = Food(grid_size, screen_width, screen_height)\n        self.score = 0\n        self.game_over = False\n        \n        # Initialize food position avoiding snake\n        self.food.randomize_position(self.snake.body)\n    \n    def update(self):\n        if self.game_over:\n            return\n        \n        self.snake.move()\n        \n        # Check food collision\n        if self.snake.body[0] == self.food.position:\n            self.snake.grow_snake()\n            self.food.randomize_position(self.snake.body)\n            self.score += 10\n        \n        # Check collisions\n        self.check_collisions()\n    \n    def check_collisions(self):\n        head = self.snake.body[0]\n        \n        # Wall collision\n        if (head[0] < 0 or head[0] >= self.screen_width or \n            head[1] < 0 or head[1] >= self.screen_height):\n            self.game_over = True\n        \n        # Self collision\n        if self.snake.check_self_collision():\n            self.game_over = True"
                    }
                },
                {
                    text: "–ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ Game –∫–ª–∞—Å—Å",
                    command: "cat >> src/game/game.py << 'EOF'\nfrom .snake import Snake\nfrom .food import Food\n\nclass Game:\n    def __init__(self):\n        # ... existing code\n        self.snake = Snake()\n        self.food = Food()\n        self.score = 0\n        self.game_over = False\n    \n    def update(self):\n        if self.game_over:\n            return\n            \n        self.snake.move()\n        \n        # Check food collision\n        if self.snake.body[0] == self.food.position:\n            self.snake.body.append(self.snake.body[-1])\n            self.food.randomize_position()\n            self.score += 10\nEOF",
                    feedback: "‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é",
                    story: "üîó –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã —Å–º–µ—à–∞–Ω–∞ —Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–í—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Ç–æ–¥–µ",
                    command: "cat >> src/game/game.py << 'EOF'\n    def update_game(self):\n        # –í—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Ç–æ–¥–µ\n        self.snake.move()\n        \n        # –ï–¥–∞\n        if self.snake.body[0] == self.food.position:\n            self.snake.body.append((0,0))\n            self.food.position = (random.randint(0,79)*10, random.randint(0,59)*10)\n            self.score += 1\nEOF",
                    feedback: "‚ùå –í—Å—è –ª–æ–≥–∏–∫–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Ç–æ–¥–µ",
                    story: "üåÄ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ–≥–æ",
                    command: "cat > src/globals.py << 'EOF'\n# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\nsnake_body = [(100,100), (90,100), (80,100)]\nfood_position = (400, 300)\nscore = 0\ngame_over = False\nEOF",
                    feedback: "‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã",
                    story: "üíÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä—É–¥–Ω–æ–Ω–∞—Ö–æ–¥–∏–º—ã—Ö –æ—à–∏–±–æ–∫!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },

        // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤...
        // –®–∞–≥–∏ 11-30 –±—É–¥—É—Ç –∏–º–µ—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        {
            id: 11,
            title: "üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π",
            description: "–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏ –∏ —Å–æ–±–æ–π.",
            question: "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–û—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å CollisionManager —Å —Ç–µ—Å—Ç–∞–º–∏",
                    command: "cat > src/game/collision.py << 'EOF'\nclass CollisionManager:\n    def __init__(self, screen_width, screen_height):\n        self.screen_width = screen_width\n        self.screen_height = screen_height\n    \n    def check_wall_collision(self, position):\n        x, y = position\n        return (x < 0 or x >= self.screen_width or \n                y < 0 or y >= self.screen_height)\n    \n    def check_self_collision(self, snake_body):\n        if len(snake_body) < 2:\n            return False\n        head = snake_body[0]\n        return head in snake_body[1:]\n    \n    def check_food_collision(self, snake_head, food_position):\n        return snake_head == food_position\n    \n    def check_all_collisions(self, snake_body, food_position):\n        collisions = {\n            'wall': self.check_wall_collision(snake_body[0]),\n            'self': self.check_self_collision(snake_body),\n            'food': self.check_food_collision(snake_body[0], food_position)\n        }\n        return collisions\nEOF",
                    feedback: "‚úÖ CollisionManager —Å–æ–∑–¥–∞–Ω —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é",
                    story: "üí• –û—Ç–ª–∏—á–Ω–æ! –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —É–ª—É—á—à–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/collision.py": "class CollisionManager:\n    def __init__(self, screen_width, screen_height):\n        self.screen_width = screen_width\n        self.screen_height = screen_height\n    \n    def check_wall_collision(self, position):\n        x, y = position\n        return (x < 0 or x >= self.screen_width or \n                y < 0 or y >= self.screen_height)\n    \n    def check_self_collision(self, snake_body):\n        if len(snake_body) < 2:\n            return False\n        head = snake_body[0]\n        return head in snake_body[1:]\n    \n    def check_food_collision(self, snake_head, food_position):\n        return snake_head == food_position\n    \n    def check_all_collisions(self, snake_body, food_position):\n        collisions = {\n            'wall': self.check_wall_collision(snake_body[0]),\n            'self': self.check_self_collision(snake_body),\n            'food': self.check_food_collision(snake_body[0], food_position)\n        }\n        return collisions"
                    }
                },
                {
                    text: "–ú–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å–µ Game",
                    command: "cat >> src/game/game.py << 'EOF'\n    def check_collisions(self):\n        head = self.snake.body[0]\n        # Wall collision\n        if (head[0] < 0 or head[0] >= 800 or \n            head[1] < 0 or head[1] >= 600):\n            self.game_over = True\n        # Self collision\n        if head in self.snake.body[1:]:\n            self.game_over = True\nEOF",
                    feedback: "‚ö†Ô∏è –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ Game –∫–ª–∞—Å—Å–µ",
                    story: "üí• –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–µ–Ω",
                    command: "cat >> src/game/game.py << 'EOF'\n    def update(self):\n        head = self.snake.body[0]\n        if head[0] < 0 or head[0] > 800 or head[1] < 0 or head[1] > 600:\n            self.running = False\nEOF",
                    feedback: "‚ùå –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–µ–Ω, –±–µ–∑ self-collision",
                    story: "üêç –û–ø–∞—Å–Ω–æ! –ó–º–µ–π–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ–±—è!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π",
                    command: "echo '# –ü–æ–∫–∞ –±–µ–∑ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π' >> src/game/game.py",
                    feedback: "‚ùå –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è",
                    story: "üíÄ –ò–≥—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤–∏–ª? –ó–º–µ–π–∫–∞ –±—É–¥–µ—Ç –∂–∏—Ç—å –≤–µ—á–Ω–æ!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 12,
            title: "üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞",
            description: "–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.",
            question: "–ö–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—á–µ—Ç?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "UI Manager —Å —Ä–∞–∑–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏",
                    command: "cat > src/game/ui.py << 'EOF'\nimport pygame\n\nclass UIManager:\n    def __init__(self):\n        self.title_font = pygame.font.Font(None, 48)\n        self.score_font = pygame.font.Font(None, 36)\n        self.small_font = pygame.font.Font(None, 24)\n        self.animations = []\n    \n    def draw_score(self, screen, score, high_score):\n        score_text = self.score_font.render(f'Score: {score}', True, (255, 255, 255))\n        high_score_text = self.small_font.render(f'High Score: {high_score}', True, (200, 200, 200))\n        screen.blit(score_text, (10, 10))\n        screen.blit(high_score_text, (10, 50))\n    \n    def draw_game_over(self, screen, score):\n        overlay = pygame.Surface((800, 600))\n        overlay.set_alpha(128)\n        overlay.fill((0, 0, 0))\n        screen.blit(overlay, (0, 0))\n        \n        game_over_text = self.title_font.render('GAME OVER', True, (255, 0, 0))\n        score_text = self.score_font.render(f'Final Score: {score}', True, (255, 255, 255))\n        \n        screen.blit(game_over_text, (400 - game_over_text.get_width()//2, 250))\n        screen.blit(score_text, (400 - score_text.get_width()//2, 320))\n    \n    def add_score_animation(self, position, points):\n        self.animations.append({\n            'text': f'+{points}',\n            'position': position,\n            'timer': 60,\n            'color': (255, 255, 0)\n        })\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ UI —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üìä –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ª—É—á—à–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/ui.py": "import pygame\n\nclass UIManager:\n    def __init__(self):\n        self.title_font = pygame.font.Font(None, 48)\n        self.score_font = pygame.font.Font(None, 36)\n        self.small_font = pygame.font.Font(None, 24)\n        self.animations = []\n    \n    def draw_score(self, screen, score, high_score):\n        score_text = self.score_font.render(f'Score: {score}', True, (255, 255, 255))\n        high_score_text = self.small_font.render(f'High Score: {high_score}', True, (200, 200, 200))\n        screen.blit(score_text, (10, 10))\n        screen.blit(high_score_text, (10, 50))\n    \n    def draw_game_over(self, screen, score):\n        overlay = pygame.Surface((800, 600))\n        overlay.set_alpha(128)\n        overlay.fill((0, 0, 0))\n        screen.blit(overlay, (0, 0))\n        \n        game_over_text = self.title_font.render('GAME OVER', True, (255, 0, 0))\n        score_text = self.score_font.render(f'Final Score: {score}', True, (255, 255, 255))\n        \n        screen.blit(game_over_text, (400 - game_over_text.get_width()//2, 250))\n        screen.blit(score_text, (400 - score_text.get_width()//2, 320))\n    \n    def add_score_animation(self, position, points):\n        self.animations.append({\n            'text': f'+{points}',\n            'position': position,\n            'timer': 60,\n            'color': (255, 255, 0)\n        })"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞",
                    command: "cat >> src/game/game.py << 'EOF'\n    def __init__(self):\n        # ... existing code\n        self.font = pygame.font.Font(None, 36)\n    \n    def render(self):\n        self.screen.fill((0, 0, 0))\n        self.snake.draw(self.screen)\n        self.food.draw(self.screen)\n        # Draw score\n        score_text = self.font.render(f'Score: {self.score}', True, (255, 255, 255))\n        self.screen.blit(score_text, (10, 10))\n        pygame.display.flip()\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
                    story: "üìä –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–°—á–µ—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ",
                    command: "cat >> src/game/game.py << 'EOF'\n    def update(self):\n        # ... game logic\n        if food_collision:\n            self.score += 10\n            print(f'Score: {self.score}')\nEOF",
                    feedback: "‚ùå –°—á–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ",
                    story: "üñ•Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–•–∞—Ä–¥–∫–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞",
                    command: "cat >> src/game/game.py << 'EOF'\n    def __init__(self):\n        self.score = 100  # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—á–µ—Ç\nEOF",
                    feedback: "‚ùå –•–∞—Ä–¥–∫–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞",
                    story: "üíÄ –ù–∞—á–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 13,
            title: "üéµ –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
            description: "–î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–∏ –¥–ª—è –ø–æ–µ–¥–∞–Ω–∏—è –µ–¥—ã –∏ game over.",
            question: "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–∏?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "AudioManager —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫",
                    command: "cat > src/utils/audio.py << 'EOF'\nimport pygame\nimport os\n\nclass AudioManager:\n    def __init__(self):\n        pygame.mixer.init()\n        self.sounds = {}\n        self.music_volume = 0.5\n        self.sound_volume = 0.7\n    \n    def load_sound(self, name, path):\n        try:\n            if os.path.exists(path):\n                self.sounds[name] = pygame.mixer.Sound(path)\n                self.sounds[name].set_volume(self.sound_volume)\n                return True\n            else:\n                print(f\"Warning: Sound file {path} not found\")\n                return False\n        except pygame.error as e:\n            print(f\"Error loading sound {path}: {e}\")\n            return False\n    \n    def play_sound(self, name):\n        if name in self.sounds:\n            self.sounds[name].play()\n    \n    def set_sound_volume(self, volume):\n        self.sound_volume = max(0.0, min(1.0, volume))\n        for sound in self.sounds.values():\n            sound.set_volume(self.sound_volume)\n    \n    def preload_sounds(self, sound_list):\n        for name, path in sound_list.items():\n            self.load_sound(name, path)\n\n# Create placeholder sound files\nmkdir -p assets/sounds\necho \"# Placeholder sound file\" > assets/sounds/eat.wav\necho \"# Placeholder sound file\" > assets/sounds/game_over.wav\necho \"# Placeholder sound file\" > assets/sounds/background.mp3\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üéµ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/utils/audio.py": "import pygame\nimport os\n\nclass AudioManager:\n    def __init__(self):\n        pygame.mixer.init()\n        self.sounds = {}\n        self.music_volume = 0.5\n        self.sound_volume = 0.7\n    \n    def load_sound(self, name, path):\n        try:\n            if os.path.exists(path):\n                self.sounds[name] = pygame.mixer.Sound(path)\n                self.sounds[name].set_volume(self.sound_volume)\n                return True\n            else:\n                print(f\"Warning: Sound file {path} not found\")\n                return False\n        except pygame.error as e:\n            print(f\"Error loading sound {path}: {e}\")\n            return False\n    \n    def play_sound(self, name):\n        if name in self.sounds:\n            self.sounds[name].play()\n    \n    def set_sound_volume(self, volume):\n        self.sound_volume = max(0.0, min(1.0, volume))\n        for sound in self.sounds.values():\n            sound.set_volume(self.sound_volume)\n    \n    def preload_sounds(self, sound_list):\n        for name, path in sound_list.items():\n            self.load_sound(name, path)",
                        "assets/sounds/": "DIR"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                    command: "cat > src/audio.py << 'EOF'\nimport pygame\n\nclass SimpleAudio:\n    def __init__(self):\n        pygame.mixer.init()\n        self.eat_sound = None\n        self.game_over_sound = None\n    \n    def play_eat(self):\n        if self.eat_sound:\n            self.eat_sound.play()\n    \n    def play_game_over(self):\n        if self.game_over_sound:\n            self.game_over_sound.play()\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üéµ –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/audio.py": "import pygame\n\nclass SimpleAudio:\n    def __init__(self):\n        pygame.mixer.init()\n        self.eat_sound = None\n        self.game_over_sound = None\n    \n    def play_eat(self):\n        if self.eat_sound:\n            self.eat_sound.play()\n    \n    def play_game_over(self):\n        if self.game_over_sound:\n            self.game_over_sound.play()"
                    }
                },
                {
                    text: "–ó–≤—É–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã",
                    command: "cat >> src/game/game.py << 'EOF'\nimport os\n\ndef play_sound(sound_name):\n    if sound_name == 'eat':\n        os.system('play -q assets/sounds/eat.wav &')\n    elif sound_name == 'game_over':\n        os.system('play -q assets/sounds/game_over.wav &')\nEOF",
                    feedback: "‚ùå –ó–≤—É–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã",
                    story: "‚öôÔ∏è –ù–µ–Ω–∞–¥–µ–∂–Ω–æ! –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ –∑–≤—É–∫–æ–≤ - –∏ —Ç–∞–∫ —Å–æ–π–¥–µ—Ç",
                    command: "echo '# –ó–≤—É–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º' >> src/game/game.py",
                    feedback: "‚ùå –ó–≤—É–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                    story: "üîá –ò–≥—Ä–∞ –±–µ–∑ –∑–≤—É–∫–æ–≤ - –∫–∞–∫ —Ñ–∏–ª—å–º –±–µ–∑ –º—É–∑—ã–∫–∏!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 14,
            title: "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–æ–≤",
            description: "–î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª.",
            question: "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∫–æ—Ä–¥—ã?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "ScoreManager —Å JSON –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
                    command: "cat > src/utils/scores.py << 'EOF'\nimport json\nimport os\nfrom datetime import datetime\n\nclass ScoreManager:\n    def __init__(self, filename='scores.json'):\n        self.filename = filename\n        self.scores = self.load_scores()\n        self.max_scores = 10\n    \n    def load_scores(self):\n        try:\n            if os.path.exists(self.filename):\n                with open(self.filename, 'r') as f:\n                    data = json.load(f)\n                    # Validate data structure\n                    if isinstance(data, list) and all(\n                        isinstance(score, dict) and \n                        'player' in score and 'score' in score and 'date' in score\n                        for score in data\n                    ):\n                        return data\n            return []\n        except (json.JSONDecodeError, IOError) as e:\n            print(f\"Error loading scores: {e}\")\n            return []\n    \n    def save_score(self, player_name, score):\n        if not player_name or not isinstance(score, (int, float)) or score < 0:\n            return False\n        \n        new_score = {\n            'player': player_name[:20],  # Limit name length\n            'score': int(score),\n            'date': datetime.now().isoformat()\n        }\n        \n        self.scores.append(new_score)\n        self.scores.sort(key=lambda x: x['score'], reverse=True)\n        self.scores = self.scores[:self.max_scores]\n        \n        try:\n            with open(self.filename, 'w') as f:\n                json.dump(self.scores, f, indent=2)\n            return True\n        except IOError as e:\n            print(f\"Error saving scores: {e}\")\n            return False\n    \n    def get_high_scores(self, limit=5):\n        return self.scores[:limit]\n    \n    def get_player_high_score(self, player_name):\n        player_scores = [s for s in self.scores if s['player'] == player_name]\n        return max([s['score'] for s in player_scores]) if player_scores else 0\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üíæ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ–∂–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/utils/scores.py": "import json\nimport os\nfrom datetime import datetime\n\nclass ScoreManager:\n    def __init__(self, filename='scores.json'):\n        self.filename = filename\n        self.scores = self.load_scores()\n        self.max_scores = 10\n    \n    def load_scores(self):\n        try:\n            if os.path.exists(self.filename):\n                with open(self.filename, 'r') as f:\n                    data = json.load(f)\n                    # Validate data structure\n                    if isinstance(data, list) and all(\n                        isinstance(score, dict) and \n                        'player' in score and 'score' in score and 'date' in score\n                        for score in data\n                    ):\n                        return data\n            return []\n        except (json.JSONDecodeError, IOError) as e:\n            print(f\"Error loading scores: {e}\")\n            return []\n    \n    def save_score(self, player_name, score):\n        if not player_name or not isinstance(score, (int, float)) or score < 0:\n            return False\n        \n        new_score = {\n            'player': player_name[:20],  # Limit name length\n            'score': int(score),\n            'date': datetime.now().isoformat()\n        }\n        \n        self.scores.append(new_score)\n        self.scores.sort(key=lambda x: x['score'], reverse=True)\n        self.scores = self.scores[:self.max_scores]\n        \n        try:\n            with open(self.filename, 'w') as f:\n                json.dump(self.scores, f, indent=2)\n            return True\n        except IOError as e:\n            print(f\"Error saving scores: {e}\")\n            return False\n    \n    def get_high_scores(self, limit=5):\n        return self.scores[:limit]\n    \n    def get_player_high_score(self, player_name):\n        player_scores = [s for s in self.scores if s['player'] == player_name]\n        return max([s['score'] for s in player_scores]) if player_scores else 0"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON",
                    command: "cat > src/scores.py << 'EOF'\nimport json\n\nclass SimpleScoreManager:\n    def __init__(self):\n        self.filename = 'scores.json'\n        self.scores = []\n    \n    def save_score(self, player, score):\n        self.scores.append({'player': player, 'score': score})\n        self.scores.sort(key=lambda x: x['score'], reverse=True)\n        self.scores = self.scores[:10]\n        with open(self.filename, 'w') as f:\n            json.dump(self.scores, f)\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üíæ –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/scores.py": "import json\n\nclass SimpleScoreManager:\n    def __init__(self):\n        self.filename = 'scores.json'\n        self.scores = []\n    \n    def save_score(self, player, score):\n        self.scores.append({'player': player, 'score': score})\n        self.scores.sort(key=lambda x: x['score'], reverse=True)\n        self.scores = self.scores[:10]\n        with open(self.filename, 'w') as f:\n            json.dump(self.scores, f)"
                    }
                },
                {
                    text: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
                    command: "cat > src/scores.py << 'EOF'\ndef save_score(score):\n    with open('highscores.txt', 'a') as f:\n        f.write(f'{score}\\n')\nEOF",
                    feedback: "‚ùå –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
                    story: "üìù –°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ! –ù–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–æ–≤",
                    command: "echo '# –†–µ–∫–æ—Ä–¥—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º' >> src/game/game.py",
                    feedback: "‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞",
                    story: "üíÄ –ò–≥—Ä–æ–∫–∞–º –≤–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 15,
            title: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            description: "–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏–≥—Ä—ã.",
            question: "–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ–Ω—é?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "State-based –º–µ–Ω—é —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏",
                    command: "cat > src/game/menu.py << 'EOF'\nimport pygame\n\nclass Menu:\n    def __init__(self, game):\n        self.game = game\n        self.title_font = pygame.font.Font(None, 72)\n        self.option_font = pygame.font.Font(None, 48)\n        self.options = [\"Start Game\", \"High Scores\", \"Settings\", \"Quit\"]\n        self.selected = 0\n        self.animation_offset = 0\n    \n    def handle_events(self, event):\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_UP:\n                self.selected = (self.selected - 1) % len(self.options)\n                self.game.audio.play_sound('menu_select')\n            elif event.key == pygame.K_DOWN:\n                self.selected = (self.selected + 1) % len(self.options)\n                self.game.audio.play_sound('menu_select')\n            elif event.key == pygame.K_RETURN:\n                self.game.audio.play_sound('menu_confirm')\n                self.execute_option()\n    \n    def execute_option(self):\n        option = self.options[self.selected]\n        if option == \"Start Game\":\n            self.game.start_game()\n        elif option == \"High Scores\":\n            self.game.show_high_scores()\n        elif option == \"Settings\":\n            self.game.show_settings()\n        elif option == \"Quit\":\n            self.game.running = False\n    \n    def update(self):\n        self.animation_offset = (self.animation_offset + 1) % 60\n    \n    def render(self):\n        self.game.screen.fill((0, 0, 0))\n        \n        # Animated title\n        title_y = 100 + (5 * pygame.math.Vector2(0, 1).rotate(self.animation_offset * 6).y)\n        title = self.title_font.render(\"SNAKE GAME\", True, (0, 255, 0))\n        self.game.screen.blit(title, (400 - title.get_width()//2, title_y))\n        \n        # Menu options\n        for i, option in enumerate(self.options):\n            color = (255, 255, 0) if i == self.selected else (255, 255, 255)\n            \n            # Selection indicator\n            if i == self.selected:\n                indicator = \">> \"\n                end_indicator = \" <<\"\n            else:\n                indicator = \"   \"\n                end_indicator = \"   \"\n            \n            text = self.option_font.render(f\"{indicator}{option}{end_indicator}\", True, color)\n            self.game.screen.blit(text, (400 - text.get_width()//2, 250 + i * 60))\n        \n        # Footer\n        footer_font = pygame.font.Font(None, 24)\n        footer = footer_font.render(\"Use UP/DOWN arrows to navigate, ENTER to select\", True, (150, 150, 150))\n        self.game.screen.blit(footer, (400 - footer.get_width()//2, 550))\n        \n        pygame.display.flip()\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –º–µ–Ω—é —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω–æ",
                    story: "üè† –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —É–ª—É—á—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/menu.py": "import pygame\n\nclass Menu:\n    def __init__(self, game):\n        self.game = game\n        self.title_font = pygame.font.Font(None, 72)\n        self.option_font = pygame.font.Font(None, 48)\n        self.options = [\"Start Game\", \"High Scores\", \"Settings\", \"Quit\"]\n        self.selected = 0\n        self.animation_offset = 0\n    \n    def handle_events(self, event):\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_UP:\n                self.selected = (self.selected - 1) % len(self.options)\n                self.game.audio.play_sound('menu_select')\n            elif event.key == pygame.K_DOWN:\n                self.selected = (self.selected + 1) % len(self.options)\n                self.game.audio.play_sound('menu_select')\n            elif event.key == pygame.K_RETURN:\n                self.game.audio.play_sound('menu_confirm')\n                self.execute_option()\n    \n    def execute_option(self):\n        option = self.options[self.selected]\n        if option == \"Start Game\":\n            self.game.start_game()\n        elif option == \"High Scores\":\n            self.game.show_high_scores()\n        elif option == \"Settings\":\n            self.game.show_settings()\n        elif option == \"Quit\":\n            self.game.running = False\n    \n    def update(self):\n        self.animation_offset = (self.animation_offset + 1) % 60\n    \n    def render(self):\n        self.game.screen.fill((0, 0, 0))\n        \n        # Animated title\n        title_y = 100 + (5 * pygame.math.Vector2(0, 1).rotate(self.animation_offset * 6).y)\n        title = self.title_font.render(\"SNAKE GAME\", True, (0, 255, 0))\n        self.game.screen.blit(title, (400 - title.get_width()//2, title_y))\n        \n        # Menu options\n        for i, option in enumerate(self.options):\n            color = (255, 255, 0) if i == self.selected else (255, 255, 255)\n            \n            # Selection indicator\n            if i == self.selected:\n                indicator = \">> \"\n                end_indicator = \" <<\"\n            else:\n                indicator = \"   \"\n                end_indicator = \"   \"\n            \n            text = self.option_font.render(f\"{indicator}{option}{end_indicator}\", True, color)\n            self.game.screen.blit(text, (400 - text.get_width()//2, 250 + i * 60))\n        \n        # Footer\n        footer_font = pygame.font.Font(None, 24)\n        footer = footer_font.render(\"Use UP/DOWN arrows to navigate, ENTER to select\", True, (150, 150, 150))\n        self.game.screen.blit(footer, (400 - footer.get_width()//2, 550))\n        \n        pygame.display.flip()"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é",
                    command: "cat > src/menu.py << 'EOF'\nimport pygame\n\nclass SimpleMenu:\n    def __init__(self, game):\n        self.game = game\n        self.font = pygame.font.Font(None, 48)\n        self.options = [\"Start Game\", \"High Scores\", \"Quit\"]\n        self.selected = 0\n    \n    def handle_events(self, event):\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_UP:\n                self.selected = (self.selected - 1) % len(self.options)\n            elif event.key == pygame.K_DOWN:\n                self.selected = (self.selected + 1) % len(self.options)\n            elif event.key == pygame.K_RETURN:\n                if self.selected == 0:\n                    self.game.start_game()\n                elif self.selected == 1:\n                    self.game.show_scores()\n                elif self.selected == 2:\n                    self.game.running = False\n    \n    def render(self):\n        self.game.screen.fill((0, 0, 0))\n        title = self.font.render(\"SNAKE GAME\", True, (0, 255, 0))\n        self.game.screen.blit(title, (300, 100))\n        \n        for i, option in enumerate(self.options):\n            color = (255, 255, 0) if i == self.selected else (255, 255, 255)\n            text = self.font.render(option, True, color)\n            self.game.screen.blit(text, (350, 200 + i * 60))\n        \n        pygame.display.flip()\nEOF",
                    feedback: "‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ",
                    story: "üè† –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –∑–≤—É–∫–∏!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/menu.py": "import pygame\n\nclass SimpleMenu:\n    def __init__(self, game):\n        self.game = game\n        self.font = pygame.font.Font(None, 48)\n        self.options = [\"Start Game\", \"High Scores\", \"Quit\"]\n        self.selected = 0\n    \n    def handle_events(self, event):\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_UP:\n                self.selected = (self.selected - 1) % len(self.options)\n            elif event.key == pygame.K_DOWN:\n                self.selected = (self.selected + 1) % len(self.options)\n            elif event.key == pygame.K_RETURN:\n                if self.selected == 0:\n                    self.game.start_game()\n                elif self.selected == 1:\n                    self.game.show_scores()\n                elif self.selected == 2:\n                    self.game.running = False\n    \n    def render(self):\n        self.game.screen.fill((0, 0, 0))\n        title = self.font.render(\"SNAKE GAME\", True, (0, 255, 0))\n        self.game.screen.blit(title, (300, 100))\n        \n        for i, option in enumerate(self.options):\n            color = (255, 255, 0) if i == self.selected else (255, 255, 255)\n            text = self.font.render(option, True, color)\n            self.game.screen.blit(text, (350, 200 + i * 60))\n        \n        pygame.display.flip()"
                    }
                },
                {
                    text: "–ú–µ–Ω—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤–≤–æ–¥",
                    command: "cat > src/menu.py << 'EOF'\ndef show_menu():\n    print(\"1. Start Game\")\n    print(\"2. High Scores\")\n    print(\"3. Quit\")\n    choice = input(\"Select: \")\n    return choice\nEOF",
                    feedback: "‚ùå –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ",
                    story: "üñ•Ô∏è –ò–≥—Ä–æ–∫–∏ –æ–∂–∏–¥–∞—é—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é –≤ –∏–≥—Ä–µ!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ –º–µ–Ω—é - —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É",
                    command: "echo '# –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É –±–µ–∑ –º–µ–Ω—é' >> src/game/game.py",
                    feedback: "‚ùå –ú–µ–Ω—é –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
                    story: "üíÄ –ò–≥—Ä–∞ –±–µ–∑ –º–µ–Ω—é –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–æ–≤ 16-30...
        {
            id: 16,
            title: "üß™ Unit —Ç–µ—Å—Ç—ã",
            description: "–ü–∏—à–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–≥—Ä—ã.",
            question: "–ö–∞–∫–∏–µ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞—Ç—å?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å pytest –∏ –º–æ–∫–∞–º–∏",
                    command: "cat > tests/test_snake.py << 'EOF'\nimport pytest\nimport sys\nimport os\nsys.path.append('src')\n\nfrom game.snake import Snake\nfrom game.food import Food\n\nclass TestSnake:\n    def setup_method(self):\n        self.snake = Snake()\n    \n    def test_initial_length(self):\n        assert len(self.snake.body) == 3\n    \n    def test_initial_position(self):\n        assert self.snake.body[0] == (100, 100)\n    \n    def test_move_forward(self):\n        initial_head = self.snake.body[0]\n        self.snake.move()\n        new_head = self.snake.body[0]\n        assert new_head[0] == initial_head[0] + 10\n        assert new_head[1] == initial_head[1]\n    \n    def test_grow_snake(self):\n        initial_length = len(self.snake.body)\n        self.snake.grow_snake()\n        self.snake.move()\n        assert len(self.snake.body) == initial_length + 1\n    \n    def test_change_direction(self):\n        self.snake.change_direction((0, -10))\n        assert self.snake.direction == (0, -10)\n    \n    def test_prevent_180_turn(self):\n        self.snake.direction = (10, 0)\n        self.snake.change_direction((-10, 0))\n        assert self.snake.direction == (10, 0)  # Should not change\n\nclass TestFood:\n    def test_food_initialization(self):\n        food = Food()\n        assert food.position != (0, 0)\n    \n    def test_food_randomize(self):\n        food = Food()\n        initial_pos = food.position\n        food.randomize_position()\n        assert food.position != initial_pos\n\nif __name__ == '__main__':\n    pytest.main([__file__, '-v'])\nEOF\nmkdir -p tests",
                    feedback: "‚úÖ –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä unit —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω",
                    story: "üß™ –û—Ç–ª–∏—á–Ω–æ! –¢–µ—Å—Ç—ã –æ–±–µ—Å–ø–µ—á–∞—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –ø–æ–º–æ–≥—É—Ç –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "tests/": "DIR",
                        "tests/test_snake.py": "import pytest\nimport sys\nimport os\nsys.path.append('src')\n\nfrom game.snake import Snake\nfrom game.food import Food\n\nclass TestSnake:\n    def setup_method(self):\n        self.snake = Snake()\n    \n    def test_initial_length(self):\n        assert len(self.snake.body) == 3\n    \n    def test_initial_position(self):\n        assert self.snake.body[0] == (100, 100)\n    \n    def test_move_forward(self):\n        initial_head = self.snake.body[0]\n        self.snake.move()\n        new_head = self.snake.body[0]\n        assert new_head[0] == initial_head[0] + 10\n        assert new_head[1] == initial_head[1]\n    \n    def test_grow_snake(self):\n        initial_length = len(self.snake.body)\n        self.snake.grow_snake()\n        self.snake.move()\n        assert len(self.snake.body) == initial_length + 1\n    \n    def test_change_direction(self):\n        self.snake.change_direction((0, -10))\n        assert self.snake.direction == (0, -10)\n    \n    def test_prevent_180_turn(self):\n        self.snake.direction = (10, 0)\n        self.snake.change_direction((-10, 0))\n        assert self.snake.direction == (10, 0)  # Should not change\n\nclass TestFood:\n    def test_food_initialization(self):\n        food = Food()\n        assert food.position != (0, 0)\n    \n    def test_food_randomize(self):\n        food = Food()\n        initial_pos = food.position\n        food.randomize_position()\n        assert food.position != initial_pos\n\nif __name__ == '__main__':\n    pytest.main([__file__, '-v'])"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å unittest",
                    command: "cat > tests/test_basic.py << 'EOF'\nimport unittest\nimport sys\nsys.path.append('src')\n\nfrom game.snake import Snake\n\nclass TestSnakeBasic(unittest.TestCase):\n    def setUp(self):\n        self.snake = Snake()\n    \n    def test_length(self):\n        self.assertEqual(len(self.snake.body), 3)\n    \n    def test_move(self):\n        head = self.snake.body[0]\n        self.snake.move()\n        self.assertNotEqual(self.snake.body[0], head)\n\nif __name__ == '__main__':\n    unittest.main()\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã",
                    story: "üß™ –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ –∫–µ–π—Å–æ–≤!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "tests/test_basic.py": "import unittest\nimport sys\nsys.path.append('src')\n\nfrom game.snake import Snake\n\nclass TestSnakeBasic(unittest.TestCase):\n    def setUp(self):\n        self.snake = Snake()\n    \n    def test_length(self):\n        self.assertEqual(len(self.snake.body), 3)\n    \n    def test_move(self):\n        head = self.snake.body[0]\n        self.snake.move()\n        self.assertNotEqual(self.snake.body[0], head)\n\nif __name__ == '__main__':\n    unittest.main()"
                    }
                },
                {
                    text: "–û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç",
                    command: "cat > test_snake.py << 'EOF'\n# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç\nfrom src.game.snake import Snake\n\nsnake = Snake()\nprint(f\"Initial length: {len(snake.body)}\")\nsnake.move()\nprint(f\"After move: {snake.body[0]}\")\nEOF",
                    feedback: "‚ùå –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –≤–º–µ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤",
                    story: "üìù –≠—Ç–æ –Ω–µ —Ç–µ—Å—Ç—ã, –∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞!",
                    score: 0,
                    type: "error",
                    mistakes: { testing: 1 }
                },
                {
                    text: "–ë–µ–∑ —Ç–µ—Å—Ç–æ–≤ - –∏ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    command: "echo '# –¢–µ—Å—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–∏—à–µ–º' > tests/placeholder.txt",
                    feedback: "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω—ã",
                    story: "üíÄ –ë–µ–∑ —Ç–µ—Å—Ç–æ–≤ –ª—é–±–æ–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤–∞–Ω!",
                    score: -1,
                    type: "error",
                    mistakes: { testing: 2 }
                }
            ]
        },
        {
            id: 17,
            title: "‚ö° –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
            description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã.",
            question: "–ö–∞–∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π",
                    command: "cat > src/utils/profiler.py << 'EOF'\nimport time\nimport functools\nfrom collections import defaultdict\n\nclass Profiler:\n    def __init__(self):\n        self.timings = defaultdict(list)\n        self.call_counts = defaultdict(int)\n    \n    def time_method(self, method_name=None):\n        def decorator(func):\n            name = method_name or func.__name__\n            \n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                start = time.perf_counter()\n                result = func(*args, **kwargs)\n                end = time.perf_counter()\n                \n                self.timings[name].append(end - start)\n                self.call_counts[name] += 1\n                return result\n            return wrapper\n        return decorator\n    \n    def get_statistics(self):\n        stats = {}\n        for method, times in self.timings.items():\n            if times:\n                stats[method] = {\n                    'calls': self.call_counts[method],\n                    'total_time': sum(times),\n                    'avg_time': sum(times) / len(times),\n                    'max_time': max(times),\n                    'min_time': min(times)\n                }\n        return stats\n    \n    def print_report(self):\n        stats = self.get_statistics()\n        print(\"\\n=== Performance Report ===\")\n        for method, data in sorted(stats.items(), key=lambda x: x[1]['total_time'], reverse=True):\n            print(f\"{method}:\")\n            print(f\"  Calls: {data['calls']}\")\n            print(f\"  Total: {data['total_time']:.6f}s\")\n            print(f\"  Avg:   {data['avg_time']:.6f}s\")\n            print(f\"  Max:   {data['max_time']:.6f}s\")\n            print(f\"  Min:   {data['min_time']:.6f}s\")\n        print(\"========================\\n\")\n\nprofiler = Profiler()\n\n# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n# @profiler.time_method('Game.update')\n# def update(self):\n#     ...\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω",
                    story: "‚ö° –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/utils/profiler.py": "import time\nimport functools\nfrom collections import defaultdict\n\nclass Profiler:\n    def __init__(self):\n        self.timings = defaultdict(list)\n        self.call_counts = defaultdict(int)\n    \n    def time_method(self, method_name=None):\n        def decorator(func):\n            name = method_name or func.__name__\n            \n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                start = time.perf_counter()\n                result = func(*args, **kwargs)\n                end = time.perf_counter()\n                \n                self.timings[name].append(end - start)\n                self.call_counts[name] += 1\n                return result\n            return wrapper\n        return decorator\n    \n    def get_statistics(self):\n        stats = {}\n        for method, times in self.timings.items():\n            if times:\n                stats[method] = {\n                    'calls': self.call_counts[method],\n                    'total_time': sum(times),\n                    'avg_time': sum(times) / len(times),\n                    'max_time': max(times),\n                    'min_time': min(times)\n                }\n        return stats\n    \n    def print_report(self):\n        stats = self.get_statistics()\n        print(\"\\n=== Performance Report ===\")\n        for method, data in sorted(stats.items(), key=lambda x: x[1]['total_time'], reverse=True):\n            print(f\"{method}:\")\n            print(f\"  Calls: {data['calls']}\")\n            print(f\"  Total: {data['total_time']:.6f}s\")\n            print(f\"  Avg:   {data['avg_time']:.6f}s\")\n            print(f\"  Max:   {data['max_time']:.6f}s\")\n            print(f\"  Min:   {data['min_time']:.6f}s\")\n        print(\"========================\\n\")\n\nprofiler = Profiler()"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏",
                    command: "cat > src/profiler.py << 'EOF'\nimport time\n\nclass SimpleProfiler:\n    def __init__(self):\n        self.timings = {}\n    \n    def time_method(self, method_name):\n        def decorator(func):\n            def wrapper(*args, **kwargs):\n                start = time.time()\n                result = func(*args, **kwargs)\n                end = time.time()\n                self.timings[method_name] = self.timings.get(method_name, 0) + (end - start)\n                return result\n            return wrapper\n        return decorator\n    \n    def get_report(self):\n        return self.timings\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω",
                    story: "‚ö° –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/profiler.py": "import time\n\nclass SimpleProfiler:\n    def __init__(self):\n        self.timings = {}\n    \n    def time_method(self, method_name):\n        def decorator(func):\n            def wrapper(*args, **kwargs):\n                start = time.time()\n                result = func(*args, **kwargs)\n                end = time.time()\n                self.timings[method_name] = self.timings.get(method_name, 0) + (end - start)\n                return result\n            return wrapper\n        return decorator\n    \n    def get_report(self):\n        return self.timings"
                    }
                },
                {
                    text: "–†—É—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏",
                    command: "cat > debug_performance.py << 'EOF'\n# –†—É—á–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\nimport time\n\nstart = time.time()\n# –ö–æ–¥ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è\nend = time.time()\nprint(f\"Time: {end - start}\")\nEOF",
                    feedback: "‚ùå –†—É—á–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    story: "‚è±Ô∏è –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! –ù—É–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è!",
                    score: 0,
                    type: "error",
                    mistakes: { performance: 1 }
                },
                {
                    text: "–ë–µ–∑ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –∏ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ",
                    command: "echo '# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ' >> src/game/game.py",
                    feedback: "‚ùå –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
                    story: "üêå –ë–µ–∑ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é!",
                    score: -1,
                    type: "error",
                    mistakes: { performance: 2 }
                }
            ]
        },
        {
            id: 18,
            title: "üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è",
            description: "–°–æ–∑–¥–∞–µ–º Dockerfile –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –∏–≥—Ä—ã.",
            question: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å Dockerfile?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "Multi-stage Dockerfile —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π",
                    command: "cat > Dockerfile << 'EOF'\n# Build stage\nFROM python:3.9-slim as builder\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install --user --no-cache-dir -r requirements.txt\n\n# Runtime stage\nFROM python:3.9-slim\n\nWORKDIR /app\n\n# Install runtime dependencies\nRUN apt-get update && apt-get install -y \\\n    libsdl2-2.0-0 \\\n    libsdl2-image-2.0-0 \\\n    libsdl2-mixer-2.0-0 \\\n    libsdl2-ttf-2.0-0 \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy Python dependencies from builder\nCOPY --from=builder /root/.local /root/.local\n\n# Copy application code\nCOPY src/ ./src/\nCOPY assets/ ./assets/\n\n# Make sure scripts in .local are usable\nENV PATH=/root/.local/bin:$PATH\n\n# Create non-root user for security\nRUN useradd --create-home --shell /bin/bash app\nUSER app\n\n# Expose volume for scores\nVOLUME [\"/app/data\"]\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD python -c \"import pygame; pygame.init(); pygame.quit()\" || exit 1\n\nCMD [\"python\", \"-m\", \"src.game.game\"]\nEOF\n\n# Create .dockerignore\ncat > .dockerignore << 'DOCKERIGNOREEOF'\n__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.Python\nenv/\nvenv/\n.venv\n.git/\n.gitignore\nREADME.md\nDockerfile\n.dockerignore\n tests/\n.DS_Store\nDOCKERIGNOREEOF",
                    feedback: "‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π multi-stage Dockerfile —Å–æ–∑–¥–∞–Ω",
                    story: "üê≥ –û—Ç–ª–∏—á–Ω–æ! –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "Dockerfile": "FROM python:3.9-slim as builder\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --user --no-cache-dir -r requirements.txt\n\nFROM python:3.9-slim\n\nWORKDIR /app\n\nRUN apt-get update && apt-get install -y \\\n    libsdl2-2.0-0 \\\n    libsdl2-image-2.0-0 \\\n    libsdl2-mixer-2.0-0 \\\n    libsdl2-ttf-2.0-0 \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /root/.local /root/.local\nCOPY src/ ./src/\nCOPY assets/ ./assets/\n\nENV PATH=/root/.local/bin:$PATH\n\nRUN useradd --create-home --shell /bin/bash app\nUSER app\n\nVOLUME [\"/app/data\"]\n\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD python -c \"import pygame; pygame.init(); pygame.quit()\" || exit 1\n\nCMD [\"python\", \"-m\", \"src.game.game\"]",
                        ".dockerignore": "__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.Python\nenv/\nvenv/\n.venv\n.git/\n.gitignore\nREADME.md\nDockerfile\n.dockerignore\n tests/\n.DS_Store"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤—ã–π Dockerfile",
                    command: "cat > Dockerfile << 'EOF'\nFROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY src/ ./src/\nCOPY assets/ ./assets/\n\nCMD [\"python\", \"-m\", \"src.game.game\"]\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π Dockerfile —Å–æ–∑–¥–∞–Ω",
                    story: "üê≥ –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–º–µ—Ä!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "Dockerfile": "FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY src/ ./src/\nCOPY assets/ ./assets/\n\nCMD [\"python\", \"-m\", \"src.game.game\"]"
                    }
                },
                {
                    text: "Dockerfile –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                    command: "cat > Dockerfile << 'EOF'\nFROM python:3.9\n\nWORKDIR /app\nCOPY . .\nCMD [\"python\", \"game.py\"]\nEOF",
                    feedback: "‚ùå Dockerfile –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                    story: "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ Docker - –∏ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    command: "echo '# Docker –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º' > docker_notes.txt",
                    feedback: "‚ùå Docker –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    story: "üèÉ‚Äç‚ôÇÔ∏è –ë–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 19,
            title: "üöÄ CI/CD –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
            description: "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–±–æ—Ä–∫—É –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            question: "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GitHub Actions?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ü–æ–ª–Ω—ã–π CI/CD pipeline —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ —Å–±–æ—Ä–∫–æ–π",
                    command: "mkdir -p .github/workflows\ncat > .github/workflows/ci-cd.yml << 'EOF'\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    \n    - name: Install system dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev\n    \n    - name: Install Python dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install pytest pytest-cov flake8 bandit\n    \n    - name: Lint with flake8\n      run: |\n        flake8 src/ --count --max-line-length=120 --show-source --statistics\n    \n    - name: Security scan with bandit\n      run: |\n        bandit -r src/ -f html -o bandit_report.html || true\n    \n    - name: Run tests with coverage\n      run: |\n        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html\n    \n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n\n  build:\n    runs-on: ubuntu-latest\n    needs: test\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Build Docker image\n      run: |\n        docker build -t snake-game:latest .\n    \n    - name: Test Docker image\n      run: |\n        docker run --rm snake-game:latest python -c \"import pygame; print('Pygame works!')\"\n    \n    - name: Upload Docker image\n      uses: actions/upload-artifact@v3\n      with:\n        name: snake-game-docker\n        path: .\n        retention-days: 30\nEOF",
                    feedback: "‚úÖ –ü–æ–ª–Ω—ã–π CI/CD pipeline —Å–æ–∑–¥–∞–Ω",
                    story: "üöÄ –û—Ç–ª–∏—á–Ω–æ! –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–º –∫–æ–º–º–∏—Ç–µ!",
                    score: 2,
                    type: "success",
                    architecture: {
                        ".github/workflows/ci-cd.yml": "name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    \n    - name: Install system dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev\n    \n    - name: Install Python dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install pytest pytest-cov flake8 bandit\n    \n    - name: Lint with flake8\n      run: |\n        flake8 src/ --count --max-line-length=120 --show-source --statistics\n    \n    - name: Security scan with bandit\n      run: |\n        bandit -r src/ -f html -o bandit_report.html || true\n    \n    - name: Run tests with coverage\n      run: |\n        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html\n    \n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n\n  build:\n    runs-on: ubuntu-latest\n    needs: test\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Build Docker image\n      run: |\n        docker build -t snake-game:latest .\n    \n    - name: Test Docker image\n      run: |\n        docker run --rm snake-game:latest python -c \"import pygame; print('Pygame works!')\"\n    \n    - name: Upload Docker image\n      uses: actions/upload-artifact@v3\n      with:\n        name: snake-game-docker\n        path: .\n        retention-days: 30"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤—ã–π CI —Å —Ç–µ—Å—Ç–∞–º–∏",
                    command: "mkdir -p .github/workflows\ncat > .github/workflows/ci.yml << 'EOF'\nname: CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n    - name: Install dependencies\n      run: pip install -r requirements.txt\n    - name: Run tests\n      run: python -m pytest tests/\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π CI pipeline —Å–æ–∑–¥–∞–Ω",
                    story: "üöÄ –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        ".github/workflows/ci.yml": "name: CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n    - name: Install dependencies\n      run: pip install -r requirements.txt\n    - name: Run tests\n      run: python -m pytest tests/"
                    }
                },
                {
                    text: "–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤",
                    command: "cat > test_manual.sh << 'EOF'\n#!/bin/bash\necho \"Running tests manually...\"\npython -m pytest tests/\nEOF\nchmod +x test_manual.sh",
                    feedback: "‚ùå –†—É—á–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –≤–º–µ—Å—Ç–æ CI/CD",
                    story: "üëê –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–µ–≥–∫–æ –∑–∞–±—ã—Ç—å!",
                    score: 0,
                    type: "error",
                    mistakes: { testing: 1 }
                },
                {
                    text: "–ë–µ–∑ CI/CD - —Ç–µ—Å—Ç–∏—Ä—É—é –ª–æ–∫–∞–ª—å–Ω–æ",
                    command: "echo '# CI/CD –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º' > ci_notes.txt",
                    feedback: "‚ùå CI/CD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    story: "üíÄ –ë–µ–∑ CI/CD –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º!",
                    score: -1,
                    type: "error",
                    mistakes: { testing: 2 }
                }
            ]
        },
        {
            id: 20,
            title: "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            description: "–°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.",
            question: "–ö–∞–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–∑–¥–∞—Ç—å?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å API reference",
                    command: "cat > README.md << 'EOF'\n# Snake Game\n\nA classic Snake game built with Python and Pygame featuring modern software development practices.\n\n## üéÆ Features\n\n- Classic snake gameplay with smooth controls\n- High score tracking with persistent storage\n- Sound effects and background music\n- Responsive UI with animations\n- Cross-platform compatibility\n- Docker containerization\n- Comprehensive testing suite\n\n## üöÄ Quick Start\n\n### Prerequisites\n- Python 3.8+\n- Pygame 2.1.2+\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-username/snake-game.git\ncd snake-game\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run the game\npython -m src.game.game\n```\n\n### Docker\n\n```bash\n# Build and run with Docker\ndocker build -t snake-game .\ndocker run -it snake-game\n```\n\n## üèóÔ∏è Architecture\n\n```\nsrc/\n‚îú‚îÄ‚îÄ game/           # Core game logic\n‚îÇ   ‚îú‚îÄ‚îÄ game.py    # Main game class\n‚îÇ   ‚îú‚îÄ‚îÄ snake.py   # Snake behavior\n‚îÇ   ‚îú‚îÄ‚îÄ food.py    # Food generation\n‚îÇ   ‚îî‚îÄ‚îÄ collision.py # Collision detection\n‚îú‚îÄ‚îÄ utils/         # Utilities\n‚îÇ   ‚îú‚îÄ‚îÄ audio.py   # Sound management\n‚îÇ   ‚îî‚îÄ‚îÄ scores.py  # High score handling\n‚îî‚îÄ‚îÄ config.py      # Configuration\n```\n\n## üß™ Testing\n\n```bash\n# Run all tests\npytest tests/\n\n# Run with coverage\npytest --cov=src tests/\n\n# Run specific test file\npytest tests/test_snake.py -v\n```\n\n## üìù API Reference\n\n### Game Class\nMain game controller handling the game loop and state management.\n\n```python\nclass Game:\n    def __init__(self):\n        \"\"\"Initialize game with default settings.\"\"\"\n    \n    def run(self):\n        \"\"\"Start the main game loop.\"\"\"\n    \n    def handle_events(self):\n        \"\"\"Process user input and system events.\"\"\"\n```\n\n### Snake Class\nManages snake movement, growth, and collision detection.\n\n```python\nclass Snake:\n    def move(self):\n        \"\"\"Move snake in current direction.\"\"\"\n    \n    def grow_snake(self):\n        \"\"\"Increase snake length after eating food.\"\"\"\n```\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see [LICENSE](LICENSE) file for details.\n\n## üêõ Bug Reports\n\nPlease create an issue with:\n- Steps to reproduce\n- Expected behavior\n- Actual behavior\n- Screenshots if applicable\n```\n\n# Create additional documentation\ncat > docs/architecture.md << 'DOCEOF'\n# Architecture Documentation\n\n## Overview\nThe Snake Game follows a modular architecture with clear separation of concerns.\n\n## Components\n\n### Core Game Loop\n- **Game**: Orchestrates the main loop and manages game states\n- **StateManager**: Handles transitions between menu, playing, and game over states\n\n### Game Entities\n- **Snake**: Responsible for movement, growth, and self-collision detection\n- **Food**: Manages food generation and positioning\n- **CollisionManager**: Handles all collision detection logic\n\n### Utilities\n- **AudioManager**: Sound effects and music playback\n- **ScoreManager**: High score persistence and retrieval\n- **UIManager**: User interface rendering and input handling\n\n## Data Flow\n1. User input ‚Üí Game.handle_events()\n2. Game state update ‚Üí Game.update()\n3. Render cycle ‚Üí Game.render()\n4. Repeat at 60 FPS\nDOCEOF\n\nmkdir -p docs",
                    feedback: "‚úÖ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üìö –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "README.md": "# Snake Game\n\nA classic Snake game built with Python and Pygame featuring modern software development practices.\n\n## üéÆ Features\n\n- Classic snake gameplay with smooth controls\n- High score tracking with persistent storage\n- Sound effects and background music\n- Responsive UI with animations\n- Cross-platform compatibility\n- Docker containerization\n- Comprehensive testing suite\n\n## üöÄ Quick Start\n\n### Prerequisites\n- Python 3.8+\n- Pygame 2.1.2+\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-username/snake-game.git\ncd snake-game\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run the game\npython -m src.game.game\n```\n\n### Docker\n\n```bash\n# Build and run with Docker\ndocker build -t snake-game .\ndocker run -it snake-game\n```\n\n## üèóÔ∏è Architecture\n\n```\nsrc/\n‚îú‚îÄ‚îÄ game/           # Core game logic\n‚îÇ   ‚îú‚îÄ‚îÄ game.py    # Main game class\n‚îÇ   ‚îú‚îÄ‚îÄ snake.py   # Snake behavior\n‚îÇ   ‚îú‚îÄ‚îÄ food.py    # Food generation\n‚îÇ   ‚îî‚îÄ‚îÄ collision.py # Collision detection\n‚îú‚îÄ‚îÄ utils/         # Utilities\n‚îÇ   ‚îú‚îÄ‚îÄ audio.py   # Sound management\n‚îÇ   ‚îî‚îÄ‚îÄ scores.py  # High score handling\n‚îî‚îÄ‚îÄ config.py      # Configuration\n```\n\n## üß™ Testing\n\n```bash\n# Run all tests\npytest tests/\n\n# Run with coverage\npytest --cov=src tests/\n\n# Run specific test file\npytest tests/test_snake.py -v\n```\n\n## üìù API Reference\n\n### Game Class\nMain game controller handling the game loop and state management.\n\n```python\nclass Game:\n    def __init__(self):\n        \"\"\"Initialize game with default settings.\"\"\"\n    \n    def run(self):\n        \"\"\"Start the main game loop.\"\"\"\n    \n    def handle_events(self):\n        \"\"\"Process user input and system events.\"\"\"\n```\n\n### Snake Class\nManages snake movement, growth, and collision detection.\n\n```python\nclass Snake:\n    def move(self):\n        \"\"\"Move snake in current direction.\"\"\"\n    \n    def grow_snake(self):\n        \"\"\"Increase snake length after eating food.\"\"\"\n```\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see [LICENSE](LICENSE) file for details.\n\n## üêõ Bug Reports\n\nPlease create an issue with:\n- Steps to reproduce\n- Expected behavior\n- Actual behavior\n- Screenshots if applicable",
                        "docs/architecture.md": "# Architecture Documentation\n\n## Overview\nThe Snake Game follows a modular architecture with clear separation of concerns.\n\n## Components\n\n### Core Game Loop\n- **Game**: Orchestrates the main loop and manages game states\n- **StateManager**: Handles transitions between menu, playing, and game over states\n\n### Game Entities\n- **Snake**: Responsible for movement, growth, and self-collision detection\n- **Food**: Manages food generation and positioning\n- **CollisionManager**: Handles all collision detection logic\n\n### Utilities\n- **AudioManager**: Sound effects and music playback\n- **ScoreManager**: High score persistence and retrieval\n- **UIManager**: User interface rendering and input handling\n\n## Data Flow\n1. User input ‚Üí Game.handle_events()\n2. Game state update ‚Üí Game.update()\n3. Render cycle ‚Üí Game.render()\n4. Repeat at 60 FPS"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤—ã–π README",
                    command: "cat > README.md << 'EOF'\n# Snake Game\n\nClassic snake game built with Python and Pygame.\n\n## Installation\n```bash\npip install -r requirements.txt\npython -m src.game.game\n```\n\n## Features\n- Snake movement\n- Food collection\n- Score tracking\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π README —Å–æ–∑–¥–∞–Ω",
                    story: "üìö –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "README.md": "# Snake Game\n\nClassic snake game built with Python and Pygame.\n\n## Installation\n```bash\npip install -r requirements.txt\npython -m src.game.game\n```\n\n## Features\n- Snake movement\n- Food collection\n- Score tracking"
                    }
                },
                {
                    text: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                    command: "echo 'Snake Game - use python game.py' > README.txt",
                    feedback: "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                    story: "üìù –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!",
                    score: 0,
                    type: "error",
                    mistakes: { planning: 1 }
                },
                {
                    text: "–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ - –∫–æ–¥ —Å–∞–º–æ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω",
                    command: "echo '# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞' > notes.txt",
                    feedback: "‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üíÄ –ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç —Å–ª–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å!",
                    score: -1,
                    type: "error",
                    mistakes: { planning: 2 }
                }
            ]
        },
        // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–æ–≤ 21-30...
        {
            id: 21,
            title: "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            description: "–î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã.",
            question: "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏",
                    command: "cat > src/config.py << 'EOF'\nimport os\nimport json\nfrom typing import Dict, Any\n\nclass Config:\n    def __init__(self):\n        self.default_config = {\n            'game': {\n                'width': 800,\n                'height': 600,\n                'grid_size': 20,\n                'fps': 60,\n                'difficulty': 'normal'\n            },\n            'colors': {\n                'background': (0, 0, 0),\n                'snake': (0, 255, 0),\n                'food': (255, 0, 0),\n                'ui': (255, 255, 255)\n            },\n            'audio': {\n                'enabled': True,\n                'volume': 0.7,\n                'music_volume': 0.5\n            },\n            'controls': {\n                'up': 'K_UP',\n                'down': 'K_DOWN', \n                'left': 'K_LEFT',\n                'right': 'K_RIGHT',\n                'pause': 'K_p'\n            }\n        }\n        self.user_config = {}\n        self.load_config()\n    \n    def load_config(self):\n        # Load from environment variables\n        env_config = {\n            'game': {\n                'width': int(os.getenv('GAME_WIDTH', self.default_config['game']['width'])),\n                'height': int(os.getenv('GAME_HEIGHT', self.default_config['game']['height'])),\n                'fps': int(os.getenv('GAME_FPS', self.default_config['game']['fps']))\n            },\n            'audio': {\n                'enabled': os.getenv('AUDIO_ENABLED', 'true').lower() == 'true',\n                'volume': float(os.getenv('AUDIO_VOLUME', self.default_config['audio']['volume']))\n            }\n        }\n        \n        # Load from config file\n        config_file = os.getenv('CONFIG_FILE', 'config.json')\n        if os.path.exists(config_file):\n            try:\n                with open(config_file, 'r') as f:\n                    file_config = json.load(f)\n                    self.merge_configs(self.user_config, file_config)\n            except (json.JSONDecodeError, IOError):\n                pass\n        \n        self.merge_configs(self.user_config, env_config)\n    \n    def merge_configs(self, target: Dict, source: Dict):\n        for key, value in source.items():\n            if key in target and isinstance(target[key], dict) and isinstance(value, dict):\n                self.merge_configs(target[key], value)\n            else:\n                target[key] = value\n    \n    def get(self, key_path: str, default=None):\n        keys = key_path.split('.')\n        value = self.user_config\n        \n        for key in keys:\n            if isinstance(value, dict) and key in value:\n                value = value[key]\n            else:\n                # Fallback to default config\n                value = self.default_config\n                for k in keys:\n                    if isinstance(value, dict) and k in value:\n                        value = value[k]\n                    else:\n                        return default\n                break\n        \n        return value if value is not None else default\n    \n    def set(self, key_path: str, value: Any):\n        keys = key_path.split('.')\n        config = self.user_config\n        \n        for key in keys[:-1]:\n            if key not in config:\n                config[key] = {}\n            config = config[key]\n        \n        config[keys[-1]] = value\n    \n    def save_to_file(self, filename='config.json'):\n        try:\n            with open(filename, 'w') as f:\n                json.dump(self.user_config, f, indent=2)\n            return True\n        except IOError:\n            return False\n\n# Global config instance\nconfig = Config()\nEOF\n\n# Create example config file\ncat > config.example.json << 'EOF'\n{\n  \"game\": {\n    \"width\": 800,\n    \"height\": 600,\n    \"fps\": 60\n  },\n  \"audio\": {\n    \"enabled\": true,\n    \"volume\": 0.7\n  }\n}\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üîß –û—Ç–ª–∏—á–Ω–æ! –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–æ–≤!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/config.py": "import os\nimport json\nfrom typing import Dict, Any\n\nclass Config:\n    def __init__(self):\n        self.default_config = {\n            'game': {\n                'width': 800,\n                'height': 600,\n                'grid_size': 20,\n                'fps': 60,\n                'difficulty': 'normal'\n            },\n            'colors': {\n                'background': (0, 0, 0),\n                'snake': (0, 255, 0),\n                'food': (255, 0, 0),\n                'ui': (255, 255, 255)\n            },\n            'audio': {\n                'enabled': True,\n                'volume': 0.7,\n                'music_volume': 0.5\n            },\n            'controls': {\n                'up': 'K_UP',\n                'down': 'K_DOWN', \n                'left': 'K_LEFT',\n                'right': 'K_RIGHT',\n                'pause': 'K_p'\n            }\n        }\n        self.user_config = {}\n        self.load_config()\n    \n    def load_config(self):\n        # Load from environment variables\n        env_config = {\n            'game': {\n                'width': int(os.getenv('GAME_WIDTH', self.default_config['game']['width'])),\n                'height': int(os.getenv('GAME_HEIGHT', self.default_config['game']['height'])),\n                'fps': int(os.getenv('GAME_FPS', self.default_config['game']['fps']))\n            },\n            'audio': {\n                'enabled': os.getenv('AUDIO_ENABLED', 'true').lower() == 'true',\n                'volume': float(os.getenv('AUDIO_VOLUME', self.default_config['audio']['volume']))\n            }\n        }\n        \n        # Load from config file\n        config_file = os.getenv('CONFIG_FILE', 'config.json')\n        if os.path.exists(config_file):\n            try:\n                with open(config_file, 'r') as f:\n                    file_config = json.load(f)\n                    self.merge_configs(self.user_config, file_config)\n            except (json.JSONDecodeError, IOError):\n                pass\n        \n        self.merge_configs(self.user_config, env_config)\n    \n    def merge_configs(self, target: Dict, source: Dict):\n        for key, value in source.items():\n            if key in target and isinstance(target[key], dict) and isinstance(value, dict):\n                self.merge_configs(target[key], value)\n            else:\n                target[key] = value\n    \n    def get(self, key_path: str, default=None):\n        keys = key_path.split('.')\n        value = self.user_config\n        \n        for key in keys:\n            if isinstance(value, dict) and key in value:\n                value = value[key]\n            else:\n                # Fallback to default config\n                value = self.default_config\n                for k in keys:\n                    if isinstance(value, dict) and k in value:\n                        value = value[k]\n                    else:\n                        return default\n                break\n        \n        return value if value is not None else default\n    \n    def set(self, key_path: str, value: Any):\n        keys = key_path.split('.')\n        config = self.user_config\n        \n        for key in keys[:-1]:\n            if key not in config:\n                config[key] = {}\n            config = config[key]\n        \n        config[keys[-1]] = value\n    \n    def save_to_file(self, filename='config.json'):\n        try:\n            with open(filename, 'w') as f:\n                json.dump(self.user_config, f, indent=2)\n            return True\n        except IOError:\n            return False\n\n# Global config instance\nconfig = Config()",
                        "config.example.json": "{\n  \"game\": {\n    \"width\": 800,\n    \"height\": 600,\n    \"fps\": 60\n  },\n  \"audio\": {\n    \"enabled\": true,\n    \"volume\": 0.7\n  }\n}"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–æ–π config.py —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏",
                    command: "cat > src/config.py << 'EOF'\n# Game configuration\nGAME_WIDTH = 800\nGAME_HEIGHT = 600\nGRID_SIZE = 20\nFPS = 60\n\n# Colors\nBACKGROUND_COLOR = (0, 0, 0)\nSNAKE_COLOR = (0, 255, 0)\nFOOD_COLOR = (255, 0, 0)\nTEXT_COLOR = (255, 255, 255)\n\n# Game settings\nINITIAL_SNAKE_LENGTH = 3\nSNAKE_SPEED = 10\nSCORE_PER_FOOD = 10\nEOF",
                    feedback: "‚ö†Ô∏è –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üîß –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/config.py": "# Game configuration\nGAME_WIDTH = 800\nGAME_HEIGHT = 600\nGRID_SIZE = 20\nFPS = 60\n\n# Colors\nBACKGROUND_COLOR = (0, 0, 0)\nSNAKE_COLOR = (0, 255, 0)\nFOOD_COLOR = (255, 0, 0)\nTEXT_COLOR = (255, 255, 255)\n\n# Game settings\nINITIAL_SNAKE_LENGTH = 3\nSNAKE_SPEED = 10\nSCORE_PER_FOOD = 10"
                    }
                },
                {
                    text: "–•–∞—Ä–¥–∫–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–ª–∞—Å—Å–µ",
                    command: "cat >> src/game/game.py << 'EOF'\n# Hardcoded settings\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nSNAKE_SIZE = 20\nGAME_FPS = 60\nEOF",
                    feedback: "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã –≤ –∫–æ–¥–µ",
                    story: "üíÄ –•–∞—Ä–¥–∫–æ–¥ —É—Å–ª–æ–∂–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –≤—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –∫–æ–¥–µ",
                    command: "echo '# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–¥–µ' >> src/game/game.py",
                    feedback: "‚ùå –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üîß –ë–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 22,
            title: "üé® –£–ª—É—á—à–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏",
            description: "–î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≥—Ä–∞—Ñ–∏–∫—É –∏ –∞–Ω–∏–º–∞—Ü–∏–∏.",
            question: "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫—É?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–°–∏—Å—Ç–µ–º–∞ —Å–ø—Ä–∞–π—Ç–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
                    command: "cat > src/graphics/sprite_manager.py << 'EOF'\nimport pygame\nimport os\nfrom typing import Dict, List\n\nclass Sprite:\n    def __init__(self, images: List[pygame.Surface], animation_speed: float = 0.1):\n        self.images = images\n        self.current_frame = 0\n        self.animation_speed = animation_speed\n        self.animation_timer = 0.0\n        self.loop = True\n    \n    def update(self, dt: float):\n        if len(self.images) > 1:\n            self.animation_timer += dt\n            if self.animation_timer >= self.animation_speed:\n                self.animation_timer = 0\n                self.current_frame += 1\n                if self.current_frame >= len(self.images):\n                    if self.loop:\n                        self.current_frame = 0\n                    else:\n                        self.current_frame = len(self.images) - 1\n    \n    def get_current_image(self) -> pygame.Surface:\n        return self.images[self.current_frame]\n    \n    def reset(self):\n        self.current_frame = 0\n        self.animation_timer = 0.0\n\nclass SpriteManager:\n    def __init__(self):\n        self.sprites: Dict[str, Sprite] = {}\n        self.particle_systems: List = []\n    \n    def load_sprite_sheet(self, name: str, filename: str, frame_size: tuple, frames: int = 1) -> bool:\n        try:\n            if not os.path.exists(filename):\n                return False\n            \n            sheet = pygame.image.load(filename).convert_alpha()\n            sprite_frames = []\n            \n            for i in range(frames):\n                frame = pygame.Surface(frame_size, pygame.SRCALPHA)\n                frame.blit(sheet, (0, 0), (i * frame_size[0], 0, frame_size[0], frame_size[1]))\n                sprite_frames.append(frame)\n            \n            self.sprites[name] = Sprite(sprite_frames)\n            return True\n        except pygame.error:\n            return False\n    \n    def get_sprite(self, name: str) -> Sprite:\n        return self.sprites.get(name)\n    \n    def create_particle_effect(self, position: tuple, color: tuple, count: int = 10):\n        particles = []\n        for _ in range(count):\n            particle = {\n                'pos': list(position),\n                'vel': [pygame.math.Vector2(1, 0).rotate(i * 360/count) * 3 for i in range(count)],\n                'color': color,\n                'size': pygame.math.Vector2(2, 2),\n                'life': 1.0\n            }\n            particles.append(particle)\n        self.particle_systems.append(particles)\n    \n    def update_particles(self, dt: float):\n        for system in self.particle_systems[:]:\n            for particle in system[:]:\n                particle['life'] -= dt * 2\n                particle['pos'][0] += particle['vel'][0]\n                particle['pos'][1] += particle['vel'][1]\n                particle['size'][0] -= dt\n                particle['size'][1] -= dt\n                \n                if particle['life'] <= 0:\n                    system.remove(particle)\n            \n            if not system:\n                self.particle_systems.remove(system)\n    \n    def draw_particles(self, screen: pygame.Surface):\n        for system in self.particle_systems:\n            for particle in system:\n                alpha = int(255 * particle['life'])\n                color = (*particle['color'][:3], alpha)\n                size = max(1, int(particle['size'][0]))\n                pygame.draw.circle(screen, color, (int(particle['pos'][0]), int(particle['pos'][1])), size)\n\n# Create placeholder graphics\nmkdir -p assets/graphics\necho \"# Snake head sprite sheet\" > assets/graphics/snake_head.png\necho \"# Food sprite\" > assets/graphics/food.png\necho \"# Background texture\" > assets/graphics/background.jpg\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üé® –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/graphics/sprite_manager.py": "import pygame\nimport os\nfrom typing import Dict, List\n\nclass Sprite:\n    def __init__(self, images: List[pygame.Surface], animation_speed: float = 0.1):\n        self.images = images\n        self.current_frame = 0\n        self.animation_speed = animation_speed\n        self.animation_timer = 0.0\n        self.loop = True\n    \n    def update(self, dt: float):\n        if len(self.images) > 1:\n            self.animation_timer += dt\n            if self.animation_timer >= self.animation_speed:\n                self.animation_timer = 0\n                self.current_frame += 1\n                if self.current_frame >= len(self.images):\n                    if self.loop:\n                        self.current_frame = 0\n                    else:\n                        self.current_frame = len(self.images) - 1\n    \n    def get_current_image(self) -> pygame.Surface:\n        return self.images[self.current_frame]\n    \n    def reset(self):\n        self.current_frame = 0\n        self.animation_timer = 0.0\n\nclass SpriteManager:\n    def __init__(self):\n        self.sprites: Dict[str, Sprite] = {}\n        self.particle_systems: List = []\n    \n    def load_sprite_sheet(self, name: str, filename: str, frame_size: tuple, frames: int = 1) -> bool:\n        try:\n            if not os.path.exists(filename):\n                return False\n            \n            sheet = pygame.image.load(filename).convert_alpha()\n            sprite_frames = []\n            \n            for i in range(frames):\n                frame = pygame.Surface(frame_size, pygame.SRCALPHA)\n                frame.blit(sheet, (0, 0), (i * frame_size[0], 0, frame_size[0], frame_size[1]))\n                sprite_frames.append(frame)\n            \n            self.sprites[name] = Sprite(sprite_frames)\n            return True\n        except pygame.error:\n            return False\n    \n    def get_sprite(self, name: str) -> Sprite:\n        return self.sprites.get(name)\n    \n    def create_particle_effect(self, position: tuple, color: tuple, count: int = 10):\n        particles = []\n        for _ in range(count):\n            particle = {\n                'pos': list(position),\n                'vel': [pygame.math.Vector2(1, 0).rotate(i * 360/count) * 3 for i in range(count)],\n                'color': color,\n                'size': pygame.math.Vector2(2, 2),\n                'life': 1.0\n            }\n            particles.append(particle)\n        self.particle_systems.append(particles)\n    \n    def update_particles(self, dt: float):\n        for system in self.particle_systems[:]:\n            for particle in system[:]:\n                particle['life'] -= dt * 2\n                particle['pos'][0] += particle['vel'][0]\n                particle['pos'][1] += particle['vel'][1]\n                particle['size'][0] -= dt\n                particle['size'][1] -= dt\n                \n                if particle['life'] <= 0:\n                    system.remove(particle)\n            \n            if not system:\n                self.particle_systems.remove(system)\n    \n    def draw_particles(self, screen: pygame.Surface):\n        for system in self.particle_systems:\n            for particle in system:\n                alpha = int(255 * particle['life'])\n                color = (*particle['color'][:3], alpha)\n                size = max(1, int(particle['size'][0]))\n                pygame.draw.circle(screen, color, (int(particle['pos'][0]), int(particle['pos'][1])), size)",
                        "assets/graphics/": "DIR"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤—ã–µ —Å–ø—Ä–∞–π—Ç—ã –≤–º–µ—Å—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤",
                    command: "cat > src/graphics.py << 'EOF'\nimport pygame\n\nclass Graphics:\n    def __init__(self):\n        self.images = {}\n    \n    def load_image(self, name, path):\n        try:\n            self.images[name] = pygame.image.load(path)\n        except pygame.error:\n            print(f\"Could not load image: {path}\")\n    \n    def get_image(self, name):\n        return self.images.get(name)\nEOF\nmkdir -p assets/images",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üé® –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/graphics.py": "import pygame\n\nclass Graphics:\n    def __init__(self):\n        self.images = {}\n    \n    def load_image(self, name, path):\n        try:\n            self.images[name] = pygame.image.load(path)\n        except pygame.error:\n            print(f\"Could not load image: {path}\")\n    \n    def get_image(self, name):\n        return self.images.get(name)"
                    }
                },
                {
                    text: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã",
                    command: "echo '# –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã' >> src/game/game.py",
                    feedback: "‚ùå –ì—Ä–∞—Ñ–∏–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–π",
                    story: "‚ö´ –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã –≤—ã–≥–ª—è–¥—è—Ç —Å–∫—É—á–Ω–æ!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π - –∏ —Ç–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
                    command: "echo '# –ì—Ä–∞—Ñ–∏–∫–∞ –Ω–µ —É–ª—É—á—à–∞–µ–º' > graphics_notes.txt",
                    feedback: "‚ùå –ì—Ä–∞—Ñ–∏–∫–∞ –Ω–µ —É–ª—É—á—à–µ–Ω–∞",
                    story: "üé® –í–∏–∑—É–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 23,
            title: "üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
            description: "–î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.",
            question: "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π",
                    command: "cat > src/utils/logger.py << 'EOF'\nimport logging\nimport os\nfrom logging.handlers import RotatingFileHandler\nfrom datetime import datetime\n\nclass GameLogger:\n    def __init__(self, name='snake_game', log_dir='logs', max_bytes=10*1024*1024, backup_count=5):\n        self.logger = logging.getLogger(name)\n        self.logger.setLevel(logging.DEBUG)\n        \n        # Create log directory\n        os.makedirs(log_dir, exist_ok=True)\n        \n        # Formatter\n        formatter = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',\n            datefmt='%Y-%m-%d %H:%M:%S'\n        )\n        \n        # File handler with rotation\n        log_file = os.path.join(log_dir, f'snake_game_{datetime.now().strftime(\"%Y%m%d\")}.log')\n        file_handler = RotatingFileHandler(\n            log_file,\n            maxBytes=max_bytes,\n            backupCount=backup_count,\n            encoding='utf-8'\n        )\n        file_handler.setLevel(logging.DEBUG)\n        file_handler.setFormatter(formatter)\n        \n        # Console handler\n        console_handler = logging.StreamHandler()\n        console_handler.setLevel(logging.INFO)\n        console_handler.setFormatter(formatter)\n        \n        # Add handlers\n        self.logger.addHandler(file_handler)\n        self.logger.addHandler(console_handler)\n        \n        # Log initialization\n        self.logger.info('Game logger initialized')\n    \n    def debug(self, message, *args, **kwargs):\n        self.logger.debug(message, *args, **kwargs)\n    \n    def info(self, message, *args, **kwargs):\n        self.logger.info(message, *args, **kwargs)\n    \n    def warning(self, message, *args, **kwargs):\n        self.logger.warning(message, *args, **kwargs)\n    \n    def error(self, message, *args, **kwargs):\n        self.logger.error(message, *args, **kwargs)\n    \n    def critical(self, message, *args, **kwargs):\n        self.logger.critical(message, *args, **kwargs)\n    \n    def log_performance(self, operation: str, duration: float):\n        if duration > 0.1:  # Log slow operations\n            self.warning(f'Slow operation: {operation} took {duration:.3f}s')\n        else:\n            self.debug(f'Operation: {operation} took {duration:.3f}s')\n    \n    def log_game_event(self, event_type: str, **details):\n        details_str = ' '.join(f'{k}={v}' for k, v in details.items())\n        self.info(f'Game event: {event_type} - {details_str}')\n\n# Global logger instance\ngame_logger = GameLogger()\n\n# Example usage:\n# game_logger.info('Game started')\n# game_logger.log_game_event('food_eaten', score=100, position=(100, 200))\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üîç –û—Ç–ª–∏—á–Ω–æ! –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤ –æ—Ç–ª–∞–¥–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–µ!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/utils/logger.py": "import logging\nimport os\nfrom logging.handlers import RotatingFileHandler\nfrom datetime import datetime\n\nclass GameLogger:\n    def __init__(self, name='snake_game', log_dir='logs', max_bytes=10*1024*1024, backup_count=5):\n        self.logger = logging.getLogger(name)\n        self.logger.setLevel(logging.DEBUG)\n        \n        # Create log directory\n        os.makedirs(log_dir, exist_ok=True)\n        \n        # Formatter\n        formatter = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',\n            datefmt='%Y-%m-%d %H:%M:%S'\n        )\n        \n        # File handler with rotation\n        log_file = os.path.join(log_dir, f'snake_game_{datetime.now().strftime(\"%Y%m%d\")}.log')\n        file_handler = RotatingFileHandler(\n            log_file,\n            maxBytes=max_bytes,\n            backupCount=backup_count,\n            encoding='utf-8'\n        )\n        file_handler.setLevel(logging.DEBUG)\n        file_handler.setFormatter(formatter)\n        \n        # Console handler\n        console_handler = logging.StreamHandler()\n        console_handler.setLevel(logging.INFO)\n        console_handler.setFormatter(formatter)\n        \n        # Add handlers\n        self.logger.addHandler(file_handler)\n        self.logger.addHandler(console_handler)\n        \n        # Log initialization\n        self.logger.info('Game logger initialized')\n    \n    def debug(self, message, *args, **kwargs):\n        self.logger.debug(message, *args, **kwargs)\n    \n    def info(self, message, *args, **kwargs):\n        self.logger.info(message, *args, **kwargs)\n    \n    def warning(self, message, *args, **kwargs):\n        self.logger.warning(message, *args, **kwargs)\n    \n    def error(self, message, *args, **kwargs):\n        self.logger.error(message, *args, **kwargs)\n    \n    def critical(self, message, *args, **kwargs):\n        self.logger.critical(message, *args, **kwargs)\n    \n    def log_performance(self, operation: str, duration: float):\n        if duration > 0.1:  # Log slow operations\n            self.warning(f'Slow operation: {operation} took {duration:.3f}s')\n        else:\n            self.debug(f'Operation: {operation} took {duration:.3f}s')\n    \n    def log_game_event(self, event_type: str, **details):\n        details_str = ' '.join(f'{k}={v}' for k, v in details.items())\n        self.info(f'Game event: {event_type} - {details_str}')\n\n# Global logger instance\ngame_logger = GameLogger()"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª",
                    command: "cat > src/logger.py << 'EOF'\nimport logging\nimport os\n\nclass SimpleLogger:\n    def __init__(self):\n        os.makedirs('logs', exist_ok=True)\n        logging.basicConfig(\n            level=logging.INFO,\n            format='%(asctime)s - %(levelname)s - %(message)s',\n            handlers=[\n                logging.FileHandler('logs/game.log'),\n                logging.StreamHandler()\n            ]\n        )\n        self.logger = logging.getLogger('snake_game')\n    \n    def info(self, message):\n        self.logger.info(message)\n    \n    def error(self, message):\n        self.logger.error(message)\nEOF",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üîç –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç —Ä–æ—Ç–∞—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/logger.py": "import logging\nimport os\n\nclass SimpleLogger:\n    def __init__(self):\n        os.makedirs('logs', exist_ok=True)\n        logging.basicConfig(\n            level=logging.INFO,\n            format='%(asctime)s - %(levelname)s - %(message)s',\n            handlers=[\n                logging.FileHandler('logs/game.log'),\n                logging.StreamHandler()\n            ]\n        )\n        self.logger = logging.getLogger('snake_game')\n    \n    def info(self, message):\n        self.logger.info(message)\n    \n    def error(self, message):\n        self.logger.error(message)"
                    }
                },
                {
                    text: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ print",
                    command: "cat > src/debug.py << 'EOF'\n# Simple debug logging\ndef log(message):\n    print(f\"[LOG] {message}\")\n\ndef error(message):\n    print(f\"[ERROR] {message}\")\nEOF",
                    feedback: "‚ùå –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ print",
                    story: "üñ®Ô∏è Print statements –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è production!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≤—ã–≤–æ–¥",
                    command: "echo '# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ' > debug_notes.txt",
                    feedback: "‚ùå –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üîç –ë–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ production!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 24,
            title: "üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º",
            description: "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–º –∫–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏–≥—Ä—ã.",
            question: "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏–π?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "State Machine —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏",
                    command: "cat > src/game/states.py << 'EOF'\nfrom enum import Enum\nfrom typing import Callable, Dict, Any\nimport pygame\n\nclass GameState(Enum):\n    BOOT = \"boot\"\n    MENU = \"menu\"\n    PLAYING = \"playing\"\n    PAUSED = \"paused\"\n    GAME_OVER = \"game_over\"\n    HIGH_SCORES = \"high_scores\"\n    SETTINGS = \"settings\"\n    EXIT = \"exit\"\n\nclass StateTransition:\n    def __init__(self, from_state: GameState, to_state: GameState, condition: Callable[[], bool] = None):\n        self.from_state = from_state\n        self.to_state = to_state\n        self.condition = condition or (lambda: True)\n\nclass StateMachine:\n    def __init__(self):\n        self.state = GameState.BOOT\n        self.previous_state = None\n        self.transitions: Dict[GameState, list] = {}\n        self.state_handlers: Dict[GameState, Callable] = {}\n        self.enter_handlers: Dict[GameState, Callable] = {}\n        self.exit_handlers: Dict[GameState, Callable] = {}\n    \n    def add_transition(self, transition: StateTransition):\n        if transition.from_state not in self.transitions:\n            self.transitions[transition.from_state] = []\n        self.transitions[transition.from_state].append(transition)\n    \n    def set_state_handler(self, state: GameState, handler: Callable):\n        self.state_handlers[state] = handler\n    \n    def set_enter_handler(self, state: GameState, handler: Callable):\n        self.enter_handlers[state] = handler\n    \n    def set_exit_handler(self, state: GameState, handler: Callable):\n        self.exit_handlers[state] = handler\n    \n    def change_state(self, new_state: GameState):\n        if new_state != self.state:\n            # Call exit handler for current state\n            if self.state in self.exit_handlers:\n                self.exit_handlers[self.state]()\n            \n            self.previous_state = self.state\n            self.state = new_state\n            \n            # Call enter handler for new state\n            if new_state in self.enter_handlers:\n                self.enter_handlers[new_state]()\n    \n    def update(self):\n        # Check for automatic transitions\n        if self.state in self.transitions:\n            for transition in self.transitions[self.state]:\n                if transition.condition():\n                    self.change_state(transition.to_state)\n                    break\n        \n        # Call state handler\n        if self.state in self.state_handlers:\n            self.state_handlers[self.state]()\n    \n    def handle_event(self, event: pygame.event.Event):\n        # State-specific event handling can be implemented here\n        pass\n    \n    def can_transition_to(self, state: GameState) -> bool:\n        if self.state in self.transitions:\n            return any(transition.to_state == state and transition.condition() \n                      for transition in self.transitions[self.state])\n        return False\n\n# Example usage:\n# state_machine = StateMachine()\n# \n# # Add transition from MENU to PLAYING when start game is selected\n# state_machine.add_transition(StateTransition(\n#     GameState.MENU, \n#     GameState.PLAYING,\n#     lambda: start_game_selected\n# ))\n# \n# # Set state handlers\n# state_machine.set_state_handler(GameState.PLAYING, game_playing_update)\n# state_machine.set_enter_handler(GameState.PLAYING, game_playing_enter)\n# state_machine.set_exit_handler(GameState.PLAYING, game_playing_exit)\nEOF",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è State Machine —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üéÆ –û—Ç–ª–∏—á–Ω–æ! –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±–ª–µ–≥—á–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏—á!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "src/game/states.py": "from enum import Enum\nfrom typing import Callable, Dict, Any\nimport pygame\n\nclass GameState(Enum):\n    BOOT = \"boot\"\n    MENU = \"menu\"\n    PLAYING = \"playing\"\n    PAUSED = \"paused\"\n    GAME_OVER = \"game_over\"\n    HIGH_SCORES = \"high_scores\"\n    SETTINGS = \"settings\"\n    EXIT = \"exit\"\n\nclass StateTransition:\n    def __init__(self, from_state: GameState, to_state: GameState, condition: Callable[[], bool] = None):\n        self.from_state = from_state\n        self.to_state = to_state\n        self.condition = condition or (lambda: True)\n\nclass StateMachine:\n    def __init__(self):\n        self.state = GameState.BOOT\n        self.previous_state = None\n        self.transitions: Dict[GameState, list] = {}\n        self.state_handlers: Dict[GameState, Callable] = {}\n        self.enter_handlers: Dict[GameState, Callable] = {}\n        self.exit_handlers: Dict[GameState, Callable] = {}\n    \n    def add_transition(self, transition: StateTransition):\n        if transition.from_state not in self.transitions:\n            self.transitions[transition.from_state] = []\n        self.transitions[transition.from_state].append(transition)\n    \n    def set_state_handler(self, state: GameState, handler: Callable):\n        self.state_handlers[state] = handler\n    \n    def set_enter_handler(self, state: GameState, handler: Callable):\n        self.enter_handlers[state] = handler\n    \n    def set_exit_handler(self, state: GameState, handler: Callable):\n        self.exit_handlers[state] = handler\n    \n    def change_state(self, new_state: GameState):\n        if new_state != self.state:\n            # Call exit handler for current state\n            if self.state in self.exit_handlers:\n                self.exit_handlers[self.state]()\n            \n            self.previous_state = self.state\n            self.state = new_state\n            \n            # Call enter handler for new state\n            if new_state in self.enter_handlers:\n                self.enter_handlers[new_state]()\n    \n    def update(self):\n        # Check for automatic transitions\n        if self.state in self.transitions:\n            for transition in self.transitions[self.state]:\n                if transition.condition():\n                    self.change_state(transition.to_state)\n                    break\n        \n        # Call state handler\n        if self.state in self.state_handlers:\n            self.state_handlers[self.state]()\n    \n    def handle_event(self, event: pygame.event.Event):\n        # State-specific event handling can be implemented here\n        pass\n    \n    def can_transition_to(self, state: GameState) -> bool:\n        if self.state in self.transitions:\n            return any(transition.to_state == state and transition.condition() \n                      for transition in self.transitions[self.state])\n        return False"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–∞—è State Machine",
                    command: "cat > src/states.py << 'EOF'\nfrom enum import Enum\n\nclass GameState(Enum):\n    MENU = \"menu\"\n    PLAYING = \"playing\"\n    GAME_OVER = \"game_over\"\n    HIGH_SCORES = \"high_scores\"\n\nclass StateManager:\n    def __init__(self):\n        self.state = GameState.MENU\n    \n    def change_state(self, new_state):\n        self.state = new_state\n    \n    def get_state(self):\n        return self.state\nEOF",
                    feedback: "‚ö†Ô∏è –ü—Ä–æ—Å—Ç–∞—è State Machine —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üéÆ –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "src/states.py": "from enum import Enum\n\nclass GameState(Enum):\n    MENU = \"menu\"\n    PLAYING = \"playing\"\n    GAME_OVER = \"game_over\"\n    HIGH_SCORES = \"high_scores\"\n\nclass StateManager:\n    def __init__(self):\n        self.state = GameState.MENU\n    \n    def change_state(self, new_state):\n        self.state = new_state\n    \n    def get_state(self):\n        return self.state"
                    }
                },
                {
                    text: "–§–ª–∞–≥–∏ –≤–º–µ—Å—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π",
                    command: "cat >> src/game/game.py << 'EOF'\n# Use flags instead of state machine\nself.in_menu = True\nself.playing = False\nself.game_over = False\nEOF",
                    feedback: "‚ùå –§–ª–∞–≥–∏ –≤–º–µ—Å—Ç–æ State Machine",
                    story: "üö© –§–ª–∞–≥–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏",
                    command: "echo '# –ë–µ–∑ state machine' >> src/game/game.py",
                    feedback: "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
                    story: "üíÄ –ë–µ–∑ State Machine –∫–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ø–∞–≥–µ—Ç—Ç–∏!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 25,
            title: "üì¶ –°–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–∞",
            description: "–°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏.",
            question: "–ö–∞–∫ —Å–æ–±—Ä–∞—Ç—å —Ä–µ–ª–∏–∑?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
                    command: "cat > scripts/build_release.py << 'EOF'\n#!/usr/bin/env python3\nimport os\nimport shutil\nimport subprocess\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\n\nclass ReleaseBuilder:\n    def __init__(self, version=None):\n        self.version = version or self.get_version()\n        self.build_dir = Path(f\"build/snake-game-{self.version}\")\n        self.dist_dir = Path(\"dist\")\n        \n    def get_version(self):\n        try:\n            with open(\"pyproject.toml\", \"r\") as f:\n                for line in f:\n                    if \"version\" in line:\n                        return line.split(\"=\")[1].strip().strip('\"')\n        except:\n            pass\n        return f\"1.0.0-{datetime.now().strftime('%Y%m%d')}\"\n    \n    def clean_build(self):\n        if self.build_dir.exists():\n            shutil.rmtree(self.build_dir)\n        if self.dist_dir.exists():\n            shutil.rmtree(self.dist_dir)\n        self.build_dir.mkdir(parents=True)\n        self.dist_dir.mkdir(parents=True)\n    \n    def copy_source_files(self):\n        # Copy source code\n        shutil.copytree(\"src\", self.build_dir / \"src\")\n        \n        # Copy assets\n        if Path(\"assets\").exists():\n            shutil.copytree(\"assets\", self.build_dir / \"assets\")\n        \n        # Copy required files\n        for file in [\"requirements.txt\", \"README.md\", \"LICENSE\", \"config.example.json\"]:\n            if Path(file).exists():\n                shutil.copy2(file, self.build_dir / file)\n    \n    def generate_metadata(self):\n        metadata = {\n            \"name\": \"snake-game\",\n            \"version\": self.version,\n            \"build_date\": datetime.now().isoformat(),\n            \"python_version\": \"3.8+\",\n            \"dependencies\": []\n        }\n        \n        # Read dependencies\n        if Path(\"requirements.txt\").exists():\n            with open(\"requirements.txt\", \"r\") as f:\n                metadata[\"dependencies\"] = [line.strip() for line in f if line.strip()]\n        \n        with open(self.build_dir / \"build_info.json\", \"w\") as f:\n            json.dump(metadata, f, indent=2)\n    \n    def create_launch_scripts(self):\n        # Windows batch script\n        with open(self.build_dir / \"run.bat\", \"w\") as f:\n            f.write(\"\"\"@echo off\npython -m src.game.game\npause\n\"\"\")\n        \n        # Unix shell script\n        with open(self.build_dir / \"run.sh\", \"w\") as f:\n            f.write(\"\"\"#!/bin/bash\ncd \"$(dirname \"$0\")\"\npython -m src.game.game\n\"\"\")\n        os.chmod(self.build_dir / \"run.sh\", 0o755)\n    \n    def run_tests(self):\n        print(\"Running tests...\")\n        try:\n            subprocess.run([\"pytest\", \"tests/\"], check=True, capture_output=True)\n            print(\"‚úì All tests passed\")\n            return True\n        except subprocess.CalledProcessError:\n            print(\"‚úó Tests failed!\")\n            return False\n    \n    def create_archives(self):\n        print(\"Creating distribution archives...\")\n        \n        # Create ZIP archive\n        zip_path = self.dist_dir / f\"snake-game-{self.version}.zip\"\n        shutil.make_archive(\n            str(self.dist_dir / f\"snake-game-{self.version}\"),\n            'zip',\n            self.build_dir.parent,\n            self.build_dir.name\n        )\n        \n        # Create tar.gz archive\n        tar_path = self.dist_dir / f\"snake-game-{self.version}.tar.gz\"\n        shutil.make_archive(\n            str(self.dist_dir / f\"snake-game-{self.version}\"),\n            'gztar',\n            self.build_dir.parent,\n            self.build_dir.name\n        )\n        \n        print(f\"‚úì Created {zip_path}\")\n        print(f\"‚úì Created {tar_path}\")\n    \n    def build(self):\n        print(f\"Building Snake Game v{self.version}...\")\n        \n        if not self.run_tests():\n            return False\n        \n        self.clean_build()\n        self.copy_source_files()\n        self.generate_metadata()\n        self.create_launch_scripts()\n        self.create_archives()\n        \n        print(f\"‚úì Build completed successfully!\")\n        print(f\"‚úì Distribution files in: {self.dist_dir}\")\n        return True\n\nif __name__ == \"__main__\":\n    import sys\n    version = sys.argv[1] if len(sys.argv) > 1 else None\n    builder = ReleaseBuilder(version)\n    success = builder.build()\n    exit(0 if success else 1)\nEOF\n\n# Create pyproject.toml for versioning\ncat > pyproject.toml << 'EOF'\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"snake-game\"\nversion = \"1.0.0\"\ndescription = \"A classic Snake game built with Python and Pygame\"\nauthors = [{name = \"Game Developer\", email = \"dev@example.com\"}]\nlicense = {text = \"MIT\"}\nreadme = \"README.md\"\nrequires-python = \">=3.8\"\n\n[project.scripts]\nsnake-game = \"src.game.game:main\"\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]\ninclude = [\"src*\"]\nEOF\n\nmkdir -p scripts",
                    feedback: "‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üì¶ –û—Ç–ª–∏—á–Ω–æ! –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "scripts/build_release.py": "#!/usr/bin/env python3\nimport os\nimport shutil\nimport subprocess\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\n\nclass ReleaseBuilder:\n    def __init__(self, version=None):\n        self.version = version or self.get_version()\n        self.build_dir = Path(f\"build/snake-game-{self.version}\")\n        self.dist_dir = Path(\"dist\")\n        \n    def get_version(self):\n        try:\n            with open(\"pyproject.toml\", \"r\") as f:\n                for line in f:\n                    if \"version\" in line:\n                        return line.split(\"=\")[1].strip().strip('\"')\n        except:\n            pass\n        return f\"1.0.0-{datetime.now().strftime('%Y%m%d')}\"\n    \n    def clean_build(self):\n        if self.build_dir.exists():\n            shutil.rmtree(self.build_dir)\n        if self.dist_dir.exists():\n            shutil.rmtree(self.dist_dir)\n        self.build_dir.mkdir(parents=True)\n        self.dist_dir.mkdir(parents=True)\n    \n    def copy_source_files(self):\n        # Copy source code\n        shutil.copytree(\"src\", self.build_dir / \"src\")\n        \n        # Copy assets\n        if Path(\"assets\").exists():\n            shutil.copytree(\"assets\", self.build_dir / \"assets\")\n        \n        # Copy required files\n        for file in [\"requirements.txt\", \"README.md\", \"LICENSE\", \"config.example.json\"]:\n            if Path(file).exists():\n                shutil.copy2(file, self.build_dir / file)\n    \n    def generate_metadata(self):\n        metadata = {\n            \"name\": \"snake-game\",\n            \"version\": self.version,\n            \"build_date\": datetime.now().isoformat(),\n            \"python_version\": \"3.8+\",\n            \"dependencies\": []\n        }\n        \n        # Read dependencies\n        if Path(\"requirements.txt\").exists():\n            with open(\"requirements.txt\", \"r\") as f:\n                metadata[\"dependencies\"] = [line.strip() for line in f if line.strip()]\n        \n        with open(self.build_dir / \"build_info.json\", \"w\") as f:\n            json.dump(metadata, f, indent=2)\n    \n    def create_launch_scripts(self):\n        # Windows batch script\n        with open(self.build_dir / \"run.bat\", \"w\") as f:\n            f.write(\"\"\"@echo off\npython -m src.game.game\npause\n\"\"\")\n        \n        # Unix shell script\n        with open(self.build_dir / \"run.sh\", \"w\") as f:\n            f.write(\"\"\"#!/bin/bash\ncd \"$(dirname \"$0\")\"\npython -m src.game.game\n\"\"\")\n        os.chmod(self.build_dir / \"run.sh\", 0o755)\n    \n    def run_tests(self):\n        print(\"Running tests...\")\n        try:\n            subprocess.run([\"pytest\", \"tests/\"], check=True, capture_output=True)\n            print(\"‚úì All tests passed\")\n            return True\n        except subprocess.CalledProcessError:\n            print(\"‚úó Tests failed!\")\n            return False\n    \n    def create_archives(self):\n        print(\"Creating distribution archives...\")\n        \n        # Create ZIP archive\n        zip_path = self.dist_dir / f\"snake-game-{self.version}.zip\"\n        shutil.make_archive(\n            str(self.dist_dir / f\"snake-game-{self.version}\"),\n            'zip',\n            self.build_dir.parent,\n            self.build_dir.name\n        )\n        \n        # Create tar.gz archive\n        tar_path = self.dist_dir / f\"snake-game-{self.version}.tar.gz\"\n        shutil.make_archive(\n            str(self.dist_dir / f\"snake-game-{self.version}\"),\n            'gztar',\n            self.build_dir.parent,\n            self.build_dir.name\n        )\n        \n        print(f\"‚úì Created {zip_path}\")\n        print(f\"‚úì Created {tar_path}\")\n    \n    def build(self):\n        print(f\"Building Snake Game v{self.version}...\")\n        \n        if not self.run_tests():\n            return False\n        \n        self.clean_build()\n        self.copy_source_files()\n        self.generate_metadata()\n        self.create_launch_scripts()\n        self.create_archives()\n        \n        print(f\"‚úì Build completed successfully!\")\n        print(f\"‚úì Distribution files in: {self.dist_dir}\")\n        return True\n\nif __name__ == \"__main__\":\n    import sys\n    version = sys.argv[1] if len(sys.argv) > 1 else None\n    builder = ReleaseBuilder(version)\n    success = builder.build()\n    exit(0 if success else 1)",
                        "pyproject.toml": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"snake-game\"\nversion = \"1.0.0\"\ndescription = \"A classic Snake game built with Python and Pygame\"\nauthors = [{name = \"Game Developer\", email = \"dev@example.com\"}]\nlicense = {text = \"MIT\"}\nreadme = \"README.md\"\nrequires-python = \">=3.8\"\n\n[project.scripts]\nsnake-game = \"src.game.game:main\"\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]\ninclude = [\"src*\"]"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–æ–π bash —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏",
                    command: "cat > build.sh << 'EOF'\n#!/bin/bash\n\necho \"Building Snake Game...\"\n\n# Clean build directory\nrm -rf build\nmkdir build\n\n# Copy necessary files\ncp -r src/ build/\ncp -r assets/ build/\ncp requirements.txt build/\ncp README.md build/\n\n# Create run script\ncat > build/run.sh << 'SCRIPTEOF'\n#!/bin/bash\ncd \"$(dirname \"$0\")\"\npip install -r requirements.txt\npython -m src.game.game\nSCRIPTEOF\n\nchmod +x build/run.sh\n\necho \"Build complete!\"\nEOF\nchmod +x build.sh",
                    feedback: "‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω",
                    story: "üì¶ –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
                    score: 1,
                    type: "warning",
                    architecture: {
                        "build.sh": "#!/bin/bash\n\necho \"Building Snake Game...\"\n\n# Clean build directory\nrm -rf build\nmkdir build\n\n# Copy necessary files\ncp -r src/ build/\ncp -r assets/ build/\ncp requirements.txt build/\ncp README.md build/\n\n# Create run script\ncat > build/run.sh << 'SCRIPTEOF'\n#!/bin/bash\ncd \"$(dirname \"$0\")\"\npip install -r requirements.txt\npython -m src.game.game\nSCRIPTEOF\n\nchmod +x build/run.sh\n\necho \"Build complete!\""
                    }
                },
                {
                    text: "–†—É—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
                    command: "mkdir release\ncp -r src/ release/\ncp requirements.txt release/\necho \"Manual build created\"",
                    feedback: "‚ùå –†—É—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üëê –†—É—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞–º!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ —Å–±–æ—Ä–∫–∏ - –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∫–∞–∫ –µ—Å—Ç—å",
                    command: "echo '# –°–±–æ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞' > build_notes.txt",
                    feedback: "‚ùå –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üì¶ –ë–µ–∑ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –∏–≥—Ä—É!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        // –®–∞–≥–∏ 26-30 –∏ –∏—Ç–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ...
        {
            id: 26,
            title: "üß™ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            description: "–ü—Ä–æ–≤–æ–¥–∏–º comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã.",
            question: "–ö–∞–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏",
                    command: "cat > tests/integration_test.py << 'EOF'\nimport pytest\nimport pygame\nimport sys\nimport os\nsys.path.append('src')\n\nfrom game.game import Game\nfrom game.snake import Snake\nfrom game.food import Food\nfrom utils.scores import ScoreManager\n\nclass TestIntegration:\n    def test_game_initialization(self):\n        \"\"\"Test that game initializes correctly\"\"\"\n        game = Game()\n        assert game.screen is not None\n        assert game.clock is not None\n        assert game.running == True\n    \n    def test_snake_movement(self):\n        \"\"\"Test snake movement and growth\"\"\"\n        snake = Snake()\n        initial_length = len(snake.body)\n        \n        # Test movement\n        initial_head = snake.body[0]\n        snake.move()\n        new_head = snake.body[0]\n        assert new_head != initial_head\n        \n        # Test growth\n        snake.grow_snake()\n        snake.move()\n        assert len(snake.body) == initial_length + 1\n    \n    def test_food_generation(self):\n        \"\"\"Test food generation and collision\"\"\"\n        food = Food()\n        initial_position = food.position\n        \n        # Test randomization\n        food.randomize_position()\n        assert food.position != initial_position\n    \n    def test_score_system(self):\n        \"\"\"Test score saving and retrieval\"\"\"\n        score_manager = ScoreManager()\n        test_player = \"TestPlayer\"\n        test_score = 100\n        \n        # Save score\n        assert score_manager.save_score(test_player, test_score) == True\n        \n        # Check if score is in high scores\n        high_scores = score_manager.get_high_scores()\n        assert any(score['player'] == test_player and score['score'] == test_score \n                  for score in high_scores)\n    \n    def test_collision_detection(self):\n        \"\"\"Test wall and self collision\"\"\"\n        from game.collision import CollisionManager\n        \n        collision_mgr = CollisionManager(800, 600)\n        \n        # Test wall collision\n        assert collision_mgr.check_wall_collision((-10, 100)) == True\n        assert collision_mgr.check_wall_collision((100, -10)) == True\n        assert collision_mgr.check_wall_collision((810, 100)) == True\n        assert collision_mgr.check_wall_collision((100, 610)) == True\n        assert collision_mgr.check_wall_collision((400, 300)) == False\n        \n        # Test self collision\n        snake_body = [(100, 100), (90, 100), (100, 100)]  # Head touches body\n        assert collision_mgr.check_self_collision(snake_body) == True\n        \n        snake_body = [(100, 100), (90, 100), (80, 100)]  # No collision\n        assert collision_mgr.check_self_collision(snake_body) == False\n\nclass TestPerformance:\n    def test_game_performance(self):\n        \"\"\"Test that game maintains good performance\"\"\"\n        import time\n        \n        game = Game()\n        \n        # Test update performance\n        start_time = time.time()\n        for _ in range(1000):\n            game.update()\n        end_time = time.time()\n        \n        update_time = end_time - start_time\n        assert update_time < 1.0, f\"Update too slow: {update_time}s\"\n    \n    def test_memory_usage(self):\n        \"\"\"Test that game doesn't have memory leaks\"\"\"\n        import psutil\n        import os\n        \n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss\n        \n        # Create and destroy multiple game instances\n        for _ in range(100):\n            game = Game()\n            del game\n        \n        final_memory = process.memory_info().rss\n        memory_increase = final_memory - initial_memory\n        \n        # Allow some increase but not massive leaks\n        assert memory_increase < 10 * 1024 * 1024, f\"Memory leak: {memory_increase} bytes\"\n\nif __name__ == \"__main__\":\n    pytest.main([__file__, '-v', '--tb=short'])\nEOF\n\n# Run comprehensive tests\npython -m pytest tests/ -v --cov=src --cov-report=html\npython tests/integration_test.py",
                    feedback: "‚úÖ –ü–æ–ª–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    story: "üß™ –û—Ç–ª–∏—á–Ω–æ! –ò–≥—Ä–∞ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "tests/integration_test.py": "import pytest\nimport pygame\nimport sys\nimport os\nsys.path.append('src')\n\nfrom game.game import Game\nfrom game.snake import Snake\nfrom game.food import Food\nfrom utils.scores import ScoreManager\n\nclass TestIntegration:\n    def test_game_initialization(self):\n        \"\"\"Test that game initializes correctly\"\"\"\n        game = Game()\n        assert game.screen is not None\n        assert game.clock is not None\n        assert game.running == True\n    \n    def test_snake_movement(self):\n        \"\"\"Test snake movement and growth\"\"\"\n        snake = Snake()\n        initial_length = len(snake.body)\n        \n        # Test movement\n        initial_head = snake.body[0]\n        snake.move()\n        new_head = snake.body[0]\n        assert new_head != initial_head\n        \n        # Test growth\n        snake.grow_snake()\n        snake.move()\n        assert len(snake.body) == initial_length + 1\n    \n    def test_food_generation(self):\n        \"\"\"Test food generation and collision\"\"\"\n        food = Food()\n        initial_position = food.position\n        \n        # Test randomization\n        food.randomize_position()\n        assert food.position != initial_position\n    \n    def test_score_system(self):\n        \"\"\"Test score saving and retrieval\"\"\"\n        score_manager = ScoreManager()\n        test_player = \"TestPlayer\"\n        test_score = 100\n        \n        # Save score\n        assert score_manager.save_score(test_player, test_score) == True\n        \n        # Check if score is in high scores\n        high_scores = score_manager.get_high_scores()\n        assert any(score['player'] == test_player and score['score'] == test_score \n                  for score in high_scores)\n    \n    def test_collision_detection(self):\n        \"\"\"Test wall and self collision\"\"\"\n        from game.collision import CollisionManager\n        \n        collision_mgr = CollisionManager(800, 600)\n        \n        # Test wall collision\n        assert collision_mgr.check_wall_collision((-10, 100)) == True\n        assert collision_mgr.check_wall_collision((100, -10)) == True\n        assert collision_mgr.check_wall_collision((810, 100)) == True\n        assert collision_mgr.check_wall_collision((100, 610)) == True\n        assert collision_mgr.check_wall_collision((400, 300)) == False\n        \n        # Test self collision\n        snake_body = [(100, 100), (90, 100), (100, 100)]  # Head touches body\n        assert collision_mgr.check_self_collision(snake_body) == True\n        \n        snake_body = [(100, 100), (90, 100), (80, 100)]  # No collision\n        assert collision_mgr.check_self_collision(snake_body) == False\n\nclass TestPerformance:\n    def test_game_performance(self):\n        \"\"\"Test that game maintains good performance\"\"\"\n        import time\n        \n        game = Game()\n        \n        # Test update performance\n        start_time = time.time()\n        for _ in range(1000):\n            game.update()\n        end_time = time.time()\n        \n        update_time = end_time - start_time\n        assert update_time < 1.0, f\"Update too slow: {update_time}s\"\n    \n    def test_memory_usage(self):\n        \"\"\"Test that game doesn't have memory leaks\"\"\"\n        import psutil\n        import os\n        \n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss\n        \n        # Create and destroy multiple game instances\n        for _ in range(100):\n            game = Game()\n            del game\n        \n        final_memory = process.memory_info().rss\n        memory_increase = final_memory - initial_memory\n        \n        # Allow some increase but not massive leaks\n        assert memory_increase < 10 * 1024 * 1024, f\"Memory leak: {memory_increase} bytes\"\n\nif __name__ == \"__main__\":\n    pytest.main([__file__, '-v', '--tb=short'])"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    command: "python -m pytest tests/ -v\npython -c \"from src.game.game import Game; g = Game(); print('Game initialized successfully')\"",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    story: "üß™ –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–ª—å—à–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                    command: "python -m src.game.game --test 5",
                    feedback: "‚ùå –¢–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                    story: "üéÆ –ú–∞–ª–æ —Ç–µ—Å—Ç–æ–≤ - –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è —Å–∫—Ä—ã—Ç—ã–µ –±–∞–≥–∏!",
                    score: 0,
                    type: "error",
                    mistakes: { testing: 1 }
                },
                {
                    text: "–ë–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    command: "echo '# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º' > test_notes.txt",
                    feedback: "‚ùå –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ",
                    story: "üíÄ –í—ã–ø—É—Å–∫ –±–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏–≥—Ä–∞ –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É!",
                    score: -1,
                    type: "error",
                    mistakes: { testing: 2 }
                }
            ]
        },
        {
            id: 27,
            title: "üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
            description: "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ª–∏–Ω—Ç–µ—Ä–æ–≤.",
            question: "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞",
                    command: "cat > scripts/code_analysis.py << 'EOF'\n#!/usr/bin/env python3\nimport subprocess\nimport sys\nimport os\nfrom pathlib import Path\n\nclass CodeAnalyzer:\n    def __init__(self):\n        self.src_path = \"src\"\n        self.reports_dir = \"reports\"\n        Path(self.reports_dir).mkdir(exist_ok=True)\n    \n    def run_flake8(self):\n        \"\"\"Run flake8 for code style checking\"\"\"\n        print(\"Running flake8...\")\n        result = subprocess.run([\n            \"flake8\", self.src_path, \n            \"--max-line-length=120\",\n            \"--extend-ignore=E203,W503\",\n            \"--format=html\", \"--htmldir\", f\"{self.reports_dir}/flake8\"\n        ], capture_output=True, text=True)\n        \n        if result.returncode == 0:\n            print(\"‚úì Flake8 passed - no style issues\")\n        else:\n            print(f\"‚úó Flake8 found issues: {result.stdout}\")\n        return result.returncode == 0\n    \n    def run_pylint(self):\n        \"\"\"Run pylint for code quality analysis\"\"\"\n        print(\"Running pylint...\")\n        result = subprocess.run([\n            \"pylint\", self.src_path,\n            \"--output-format=json\",\n            f\"--output={self.reports_dir}/pylint_report.json\"\n        ], capture_output=True, text=True)\n        \n        # Parse JSON output to get score\n        try:\n            import json\n            with open(f\"{self.reports_dir}/pylint_report.json\", 'r') as f:\n                data = json.load(f)\n            score = data.get('score', 0) if isinstance(data, dict) else 0\n            print(f\"‚úì Pylint score: {score:.2f}/10\")\n            return score >= 7.0\n        except:\n            print(\"‚úó Could not parse pylint output\")\n            return False\n    \n    def run_bandit(self):\n        \"\"\"Run bandit for security analysis\"\"\"\n        print(\"Running bandit...\")\n        result = subprocess.run([\n            \"bandit\", \"-r\", self.src_path,\n            \"-f\", \"html\",\n            \"-o\", f\"{self.reports_dir}/bandit_report.html\"\n        ], capture_output=True, text=True)\n        \n        if \"No security issues found\" in result.stdout:\n            print(\"‚úì Bandit passed - no security issues\")\n            return True\n        else:\n            print(\"‚úó Bandit found security issues\")\n            return False\n    \n    def run_radon(self):\n        \"\"\"Run radon for complexity analysis\"\"\"\n        print(\"Running radon...\")\n        \n        # Cyclomatic complexity\n        result = subprocess.run([\n            \"radon\", \"cc\", self.src_path, \"-a\"\n        ], capture_output=True, text=True)\n        \n        # Check for high complexity\n        high_complexity = any(\n            \"C\" in line or \"F\" in line \n            for line in result.stdout.split('\\n') \n            if any(word in line for word in [\"C \", \"F \"])\n        )\n        \n        if not high_complexity:\n            print(\"‚úì Radon passed - good code complexity\")\n        else:\n            print(\"‚úó Radon found high complexity methods\")\n            print(result.stdout)\n        \n        return not high_complexity\n    \n    def run_mypy(self):\n        \"\"\"Run mypy for type checking\"\"\"\n        print(\"Running mypy...\")\n        result = subprocess.run([\n            \"mypy\", self.src_path,\n            \"--ignore-missing-imports\",\n            \"--html-report\", f\"{self.reports_dir}/mypy\"\n        ], capture_output=True, text=True)\n        \n        if result.returncode == 0:\n            print(\"‚úì Mypy passed - no type issues\")\n        else:\n            print(f\"‚úó Mypy found type issues: {result.stdout}\")\n        return result.returncode == 0\n    \n    def generate_report(self):\n        \"\"\"Generate comprehensive code quality report\"\"\"\n        print(\"\\n\" + \"=\"*50)\n        print(\"CODE QUALITY ANALYSIS REPORT\")\n        print(\"=\"*50)\n        \n        checks = [\n            (\"Flake8 (Style)\", self.run_flake8),\n            (\"Pylint (Quality)\", self.run_pylint),\n            (\"Bandit (Security)\", self.run_bandit),\n            (\"Radon (Complexity)\", self.run_radon),\n            (\"Mypy (Types)\", self.run_mypy)\n        ]\n        \n        results = []\n        for name, check_func in checks:\n            try:\n                passed = check_func()\n                results.append((name, passed))\n            except Exception as e:\n                print(f\"‚úó {name} failed: {e}\")\n                results.append((name, False))\n        \n        print(\"\\n\" + \"=\"*50)\n        print(\"SUMMARY:\")\n        for name, passed in results:\n            status = \"‚úì PASS\" if passed else \"‚úó FAIL\"\n            print(f\"  {name}: {status}\")\n        \n        all_passed = all(passed for _, passed in results)\n        print(f\"\\nOverall: {'‚úì ALL CHECKS PASSED' if all_passed else '‚úó SOME CHECKS FAILED'}\")\n        print(f\"Reports saved to: {self.reports_dir}/\")\n        \n        return all_passed\n\nif __name__ == \"__main__\":\n    analyzer = CodeAnalyzer()\n    success = analyzer.generate_report()\n    sys.exit(0 if success else 1)\nEOF\n\n# Install analysis tools\npip install flake8 pylint bandit radon mypy\n\n# Run comprehensive analysis\npython scripts/code_analysis.py",
                    feedback: "‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                    story: "üìä –û—Ç–ª–∏—á–Ω–æ! –ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "scripts/code_analysis.py": "#!/usr/bin/env python3\nimport subprocess\nimport sys\nimport os\nfrom pathlib import Path\n\nclass CodeAnalyzer:\n    def __init__(self):\n        self.src_path = \"src\"\n        self.reports_dir = \"reports\"\n        Path(self.reports_dir).mkdir(exist_ok=True)\n    \n    def run_flake8(self):\n        \"\"\"Run flake8 for code style checking\"\"\"\n        print(\"Running flake8...\")\n        result = subprocess.run([\n            \"flake8\", self.src_path, \n            \"--max-line-length=120\",\n            \"--extend-ignore=E203,W503\",\n            \"--format=html\", \"--htmldir\", f\"{self.reports_dir}/flake8\"\n        ], capture_output=True, text=True)\n        \n        if result.returncode == 0:\n            print(\"‚úì Flake8 passed - no style issues\")\n        else:\n            print(f\"‚úó Flake8 found issues: {result.stdout}\")\n        return result.returncode == 0\n    \n    def run_pylint(self):\n        \"\"\"Run pylint for code quality analysis\"\"\"\n        print(\"Running pylint...\")\n        result = subprocess.run([\n            \"pylint\", self.src_path,\n            \"--output-format=json\",\n            f\"--output={self.reports_dir}/pylint_report.json\"\n        ], capture_output=True, text=True)\n        \n        # Parse JSON output to get score\n        try:\n            import json\n            with open(f\"{self.reports_dir}/pylint_report.json\", 'r') as f:\n                data = json.load(f)\n            score = data.get('score', 0) if isinstance(data, dict) else 0\n            print(f\"‚úì Pylint score: {score:.2f}/10\")\n            return score >= 7.0\n        except:\n            print(\"‚úó Could not parse pylint output\")\n            return False\n    \n    def run_bandit(self):\n        \"\"\"Run bandit for security analysis\"\"\"\n        print(\"Running bandit...\")\n        result = subprocess.run([\n            \"bandit\", \"-r\", self.src_path,\n            \"-f\", \"html\",\n            \"-o\", f\"{self.reports_dir}/bandit_report.html\"\n        ], capture_output=True, text=True)\n        \n        if \"No security issues found\" in result.stdout:\n            print(\"‚úì Bandit passed - no security issues\")\n            return True\n        else:\n            print(\"‚úó Bandit found security issues\")\n            return False\n    \n    def run_radon(self):\n        \"\"\"Run radon for complexity analysis\"\"\"\n        print(\"Running radon...\")\n        \n        # Cyclomatic complexity\n        result = subprocess.run([\n            \"radon\", \"cc\", self.src_path, \"-a\"\n        ], capture_output=True, text=True)\n        \n        # Check for high complexity\n        high_complexity = any(\n            \"C\" in line or \"F\" in line \n            for line in result.stdout.split('\\n') \n            if any(word in line for word in [\"C \", \"F \"])\n        )\n        \n        if not high_complexity:\n            print(\"‚úì Radon passed - good code complexity\")\n        else:\n            print(\"‚úó Radon found high complexity methods\")\n            print(result.stdout)\n        \n        return not high_complexity\n    \n    def run_mypy(self):\n        \"\"\"Run mypy for type checking\"\"\"\n        print(\"Running mypy...\")\n        result = subprocess.run([\n            \"mypy\", self.src_path,\n            \"--ignore-missing-imports\",\n            \"--html-report\", f\"{self.reports_dir}/mypy\"\n        ], capture_output=True, text=True)\n        \n        if result.returncode == 0:\n            print(\"‚úì Mypy passed - no type issues\")\n        else:\n            print(f\"‚úó Mypy found type issues: {result.stdout}\")\n        return result.returncode == 0\n    \n    def generate_report(self):\n        \"\"\"Generate comprehensive code quality report\"\"\"\n        print(\"\\n\" + \"=\"*50)\n        print(\"CODE QUALITY ANALYSIS REPORT\")\n        print(\"=\"*50)\n        \n        checks = [\n            (\"Flake8 (Style)\", self.run_flake8),\n            (\"Pylint (Quality)\", self.run_pylint),\n            (\"Bandit (Security)\", self.run_bandit),\n            (\"Radon (Complexity)\", self.run_radon),\n            (\"Mypy (Types)\", self.run_mypy)\n        ]\n        \n        results = []\n        for name, check_func in checks:\n            try:\n                passed = check_func()\n                results.append((name, passed))\n            except Exception as e:\n                print(f\"‚úó {name} failed: {e}\")\n                results.append((name, False))\n        \n        print(\"\\n\" + \"=\"*50)\n        print(\"SUMMARY:\")\n        for name, passed in results:\n            status = \"‚úì PASS\" if passed else \"‚úó FAIL\"\n            print(f\"  {name}: {status}\")\n        \n        all_passed = all(passed for _, passed in results)\n        print(f\"\\nOverall: {'‚úì ALL CHECKS PASSED' if all_passed else '‚úó SOME CHECKS FAILED'}\")\n        print(f\"Reports saved to: {self.reports_dir}/\")\n        \n        return all_passed\n\nif __name__ == \"__main__\":\n    analyzer = CodeAnalyzer()\n    success = analyzer.generate_report()\n    sys.exit(0 if success else 1)"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤—ã–π –ª–∏–Ω—Ç–∏–Ω–≥ —Å flake8",
                    command: "pip install flake8\nflake8 src/ --max-line-length=120",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω",
                    story: "üìä –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–ª—å—à–µ –∞—Å–ø–µ–∫—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–†—É—á–Ω–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞",
                    command: "echo '# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –≤—Ä—É—á–Ω—É—é'\nfind src/ -name '*.py' | head -5 | xargs wc -l",
                    feedback: "‚ùå –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
                    story: "üëÄ –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–Ω–∞–¥–µ–∂–µ–Ω –∏ –Ω–µ–ø–æ–ª–æ–Ω!",
                    score: 0,
                    type: "error",
                    mistakes: { testing: 1 }
                },
                {
                    text: "–ë–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ - –∫–æ–¥ –∏ —Ç–∞–∫ —Ö–æ—Ä–æ—à–∏–π",
                    command: "echo '# –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–µ –Ω—É–∂–µ–Ω' > analysis_notes.txt",
                    feedback: "‚ùå –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                    story: "üíÄ –ë–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã!",
                    score: -1,
                    type: "error",
                    mistakes: { testing: 2 }
                }
            ]
        },
        {
            id: 28,
            title: "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            description: "–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞.",
            question: "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    command: "cat > scripts/security_scan.py << 'EOF'\n#!/usr/bin/env python3\nimport subprocess\nimport json\nimport sys\nfrom pathlib import Path\n\nclass SecurityScanner:\n    def __init__(self):\n        self.src_path = \"src\"\n        self.reports_dir = \"security_reports\"\n        Path(self.reports_dir).mkdir(exist_ok=True)\n    \n    def run_bandit_detailed(self):\n        \"\"\"Run bandit with detailed security analysis\"\"\"\n        print(\"Running Bandit security scan...\")\n        \n        result = subprocess.run([\n            \"bandit\", \"-r\", self.src_path,\n            \"-f\", \"json\",\n            \"-o\", f\"{self.reports_dir}/bandit_detailed.json\",\n            \"-ll\"  # Low confidence level to catch more issues\n        ], capture_output=True, text=True)\n        \n        try:\n            with open(f\"{self.reports_dir}/bandit_detailed.json\", 'r') as f:\n                report = json.load(f)\n            \n            metrics = report.get('metrics', {})\n            total_issues = sum(metrics.get('_totals', {}).get(severity, 0) \n                             for severity in ['HIGH', 'MEDIUM', 'LOW'])\n            \n            if total_issues == 0:\n                print(\"‚úì Bandit: No security issues found\")\n                return True\n            else:\n                print(f\"‚úó Bandit: Found {total_issues} security issues\")\n                # Print summary\n                for severity in ['HIGH', 'MEDIUM', 'LOW']:\n                    count = metrics.get('_totals', {}).get(severity, 0)\n                    if count > 0:\n                        print(f\"  {severity}: {count} issues\")\n                return False\n        except Exception as e:\n            print(f\"‚úó Bandit analysis failed: {e}\")\n            return False\n    \n    def check_dependencies(self):\n        \"\"\"Check for vulnerable dependencies\"\"\"\n        print(\"Checking dependencies for vulnerabilities...\")\n        \n        try:\n            result = subprocess.run([\n                \"safety\", \"check\",\n                \"--json\",\n                \"--output\", f\"{self.reports_dir}/safety_report.json\"\n            ], capture_output=True, text=True)\n            \n            if result.returncode == 0:\n                print(\"‚úì Safety: No vulnerable dependencies\")\n                return True\n            else:\n                print(\"‚úó Safety: Found vulnerable dependencies\")\n                print(result.stdout)\n                return False\n        except FileNotFoundError:\n            print(\"‚ö† Safety not installed, skipping dependency check\")\n            return True\n    \n    def check_file_permissions(self):\n        \"\"\"Check for insecure file permissions\"\"\"\n        print(\"Checking file permissions...\")\n        \n        insecure_files = []\n        for py_file in Path(self.src_path).rglob(\"*.py\"):\n            stat = py_file.stat()\n            # Check if file is writable by others\n            if stat.st_mode & 0o002:\n                insecure_files.append(str(py_file))\n        \n        if not insecure_files:\n            print(\"‚úì File permissions: Secure\")\n            return True\n        else:\n            print(f\"‚úó File permissions: {len(insecure_files)} files with insecure permissions\")\n            for file in insecure_files[:3]:  # Show first 3\n                print(f\"  {file}\")\n            return False\n    \n    def check_hardcoded_secrets(self):\n        \"\"\"Check for hardcoded secrets\"\"\"\n        print(\"Checking for hardcoded secrets...\")\n        \n        # Patterns that might indicate secrets\n        secret_patterns = [\n            r'password\\s*=',\n            r'api_key\\s*=',\n            r'secret\\s*=',\n            r'token\\s*=',\n            r'[A-Za-z0-9]{32}',  # 32 char hex string\n            r'sk_live_[A-Za-z0-9]',  # Stripe live key\n        ]\n        \n        import re\n        potential_secrets = []\n        \n        for py_file in Path(self.src_path).rglob(\"*.py\"):\n            try:\n                content = py_file.read_text()\n                for pattern in secret_patterns:\n                    if re.search(pattern, content, re.IGNORECASE):\n                        potential_secrets.append((str(py_file), pattern))\n                        break\n            except Exception:\n                continue\n        \n        if not potential_secrets:\n            print(\"‚úì Secrets: No hardcoded secrets found\")\n            return True\n        else:\n            print(f\"‚úó Secrets: {len(potential_secrets)} potential secrets found\")\n            for file, pattern in potential_secrets[:3]:\n                print(f\"  {file}: pattern '{pattern}'\")\n            return False\n    \n    def generate_security_report(self):\n        \"\"\"Generate comprehensive security report\"\"\"\n        print(\"\\n\" + \"=\"*50)\n        print(\"SECURITY ANALYSIS REPORT\")\n        print(\"=\"*50)\n        \n        checks = [\n            (\"Code Security (Bandit)\", self.run_bandit_detailed),\n            (\"Dependencies (Safety)\", self.check_dependencies),\n            (\"File Permissions\", self.check_file_permissions),\n            (\"Hardcoded Secrets\", self.check_hardcoded_secrets)\n        ]\n        \n        results = []\n        for name, check_func in checks:\n            try:\n                passed = check_func()\n                results.append((name, passed))\n            except Exception as e:\n                print(f\"‚úó {name} failed: {e}\")\n                results.append((name, False))\n        \n        print(\"\\n\" + \"=\"*50)\n        print(\"SECURITY SUMMARY:\")\n        for name, passed in results:\n            status = \"‚úì SECURE\" if passed else \"‚úó VULNERABLE\"\n            print(f\"  {name}: {status}\")\n        \n        all_secure = all(passed for _, passed in results)\n        security_level = \"HIGH\" if all_secure else \"MEDIUM\" if sum(passed for _, passed in results) >= 2 else \"LOW\"\n        \n        print(f\"\\nOverall Security Level: {security_level}\")\n        print(f\"Security reports saved to: {self.reports_dir}/\")\n        \n        return all_secure\n\nif __name__ == \"__main__\":\n    scanner = SecurityScanner()\n    secure = scanner.generate_security_report()\n    sys.exit(0 if secure else 1)\nEOF\n\n# Install security tools\npip install bandit safety\n\n# Run security scan\npython scripts/security_scan.py",
                    feedback: "‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                    story: "üîí –û—Ç–ª–∏—á–Ω–æ! –ö–æ–¥ –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "scripts/security_scan.py": "#!/usr/bin/env python3\nimport subprocess\nimport json\nimport sys\nfrom pathlib import Path\n\nclass SecurityScanner:\n    def __init__(self):\n        self.src_path = \"src\"\n        self.reports_dir = \"security_reports\"\n        Path(self.reports_dir).mkdir(exist_ok=True)\n    \n    def run_bandit_detailed(self):\n        \"\"\"Run bandit with detailed security analysis\"\"\"\n        print(\"Running Bandit security scan...\")\n        \n        result = subprocess.run([\n            \"bandit\", \"-r\", self.src_path,\n            \"-f\", \"json\",\n            \"-o\", f\"{self.reports_dir}/bandit_detailed.json\",\n            \"-ll\"  # Low confidence level to catch more issues\n        ], capture_output=True, text=True)\n        \n        try:\n            with open(f\"{self.reports_dir}/bandit_detailed.json\", 'r') as f:\n                report = json.load(f)\n            \n            metrics = report.get('metrics', {})\n            total_issues = sum(metrics.get('_totals', {}).get(severity, 0) \n                             for severity in ['HIGH', 'MEDIUM', 'LOW'])\n            \n            if total_issues == 0:\n                print(\"‚úì Bandit: No security issues found\")\n                return True\n            else:\n                print(f\"‚úó Bandit: Found {total_issues} security issues\")\n                # Print summary\n                for severity in ['HIGH', 'MEDIUM', 'LOW']:\n                    count = metrics.get('_totals', {}).get(severity, 0)\n                    if count > 0:\n                        print(f\"  {severity}: {count} issues\")\n                return False\n        except Exception as e:\n            print(f\"‚úó Bandit analysis failed: {e}\")\n            return False\n    \n    def check_dependencies(self):\n        \"\"\"Check for vulnerable dependencies\"\"\"\n        print(\"Checking dependencies for vulnerabilities...\")\n        \n        try:\n            result = subprocess.run([\n                \"safety\", \"check\",\n                \"--json\",\n                \"--output\", f\"{self.reports_dir}/safety_report.json\"\n            ], capture_output=True, text=True)\n            \n            if result.returncode == 0:\n                print(\"‚úì Safety: No vulnerable dependencies\")\n                return True\n            else:\n                print(\"‚úó Safety: Found vulnerable dependencies\")\n                print(result.stdout)\n                return False\n        except FileNotFoundError:\n            print(\"‚ö† Safety not installed, skipping dependency check\")\n            return True\n    \n    def check_file_permissions(self):\n        \"\"\"Check for insecure file permissions\"\"\"\n        print(\"Checking file permissions...\")\n        \n        insecure_files = []\n        for py_file in Path(self.src_path).rglob(\"*.py\"):\n            stat = py_file.stat()\n            # Check if file is writable by others\n            if stat.st_mode & 0o002:\n                insecure_files.append(str(py_file))\n        \n        if not insecure_files:\n            print(\"‚úì File permissions: Secure\")\n            return True\n        else:\n            print(f\"‚úó File permissions: {len(insecure_files)} files with insecure permissions\")\n            for file in insecure_files[:3]:  # Show first 3\n                print(f\"  {file}\")\n            return False\n    \n    def check_hardcoded_secrets(self):\n        \"\"\"Check for hardcoded secrets\"\"\"\n        print(\"Checking for hardcoded secrets...\")\n        \n        # Patterns that might indicate secrets\n        secret_patterns = [\n            r'password\\s*=',\n            r'api_key\\s*=',\n            r'secret\\s*=',\n            r'token\\s*=',\n            r'[A-Za-z0-9]{32}',  # 32 char hex string\n            r'sk_live_[A-Za-z0-9]',  # Stripe live key\n        ]\n        \n        import re\n        potential_secrets = []\n        \n        for py_file in Path(self.src_path).rglob(\"*.py\"):\n            try:\n                content = py_file.read_text()\n                for pattern in secret_patterns:\n                    if re.search(pattern, content, re.IGNORECASE):\n                        potential_secrets.append((str(py_file), pattern))\n                        break\n            except Exception:\n                continue\n        \n        if not potential_secrets:\n            print(\"‚úì Secrets: No hardcoded secrets found\")\n            return True\n        else:\n            print(f\"‚úó Secrets: {len(potential_secrets)} potential secrets found\")\n            for file, pattern in potential_secrets[:3]:\n                print(f\"  {file}: pattern '{pattern}'\")\n            return False\n    \n    def generate_security_report(self):\n        \"\"\"Generate comprehensive security report\"\"\"\n        print(\"\\n\" + \"=\"*50)\n        print(\"SECURITY ANALYSIS REPORT\")\n        print(\"=\"*50)\n        \n        checks = [\n            (\"Code Security (Bandit)\", self.run_bandit_detailed),\n            (\"Dependencies (Safety)\", self.check_dependencies),\n            (\"File Permissions\", self.check_file_permissions),\n            (\"Hardcoded Secrets\", self.check_hardcoded_secrets)\n        ]\n        \n        results = []\n        for name, check_func in checks:\n            try:\n                passed = check_func()\n                results.append((name, passed))\n            except Exception as e:\n                print(f\"‚úó {name} failed: {e}\")\n                results.append((name, False))\n        \n        print(\"\\n\" + \"=\"*50)\n        print(\"SECURITY SUMMARY:\")\n        for name, passed in results:\n            status = \"‚úì SECURE\" if passed else \"‚úó VULNERABLE\"\n            print(f\"  {name}: {status}\")\n        \n        all_secure = all(passed for _, passed in results)\n        security_level = \"HIGH\" if all_secure else \"MEDIUM\" if sum(passed for _, passed in results) >= 2 else \"LOW\"\n        \n        print(f\"\\nOverall Security Level: {security_level}\")\n        print(f\"Security reports saved to: {self.reports_dir}/\")\n        \n        return all_secure\n\nif __name__ == \"__main__\":\n    scanner = SecurityScanner()\n    secure = scanner.generate_security_report()\n    sys.exit(0 if secure else 1)"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ bandit",
                    command: "pip install bandit\nbandit -r src/",
                    feedback: "‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                    story: "üîí –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–ª—å—à–µ –∞—Å–ø–µ–∫—Ç–æ–≤!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞",
                    command: "grep -r 'password\\|secret\\|key' src/ || echo 'No obvious secrets found'",
                    feedback: "‚ùå –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    story: "üëÄ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–Ω–∞–¥–µ–∂–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!",
                    score: 0,
                    type: "error",
                    mistakes: { security: 1 }
                },
                {
                    text: "–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    command: "echo '# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω—É–∂–Ω–∞' > security_notes.txt",
                    feedback: "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                    story: "üíÄ –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—è–∑–≤–∏–º–∞!",
                    score: -1,
                    type: "error",
                    mistakes: { security: 2 }
                }
            ]
        },
        {
            id: 29,
            title: "üöÄ –î–µ–ø–ª–æ–π",
            description: "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –∫ –¥–µ–ø–ª–æ—é.",
            question: "–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–µ–ø–ª–æ–π?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º",
                    command: "cat > scripts/deploy.py << 'EOF'\n#!/usr/bin/env python3\nimport os\nimport shutil\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom datetime import datetime\n\nclass DeploymentManager:\n    def __init__(self, environment='production'):\n        self.environment = environment\n        self.deploy_dir = Path(f\"deploy/{environment}\")\n        self.backup_dir = Path(\"deploy/backups\")\n        self.timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    \n    def create_backup(self):\n        \"\"\"Create backup of previous deployment\"\"\"\n        if self.deploy_dir.exists():\n            backup_path = self.backup_dir / f\"backup_{self.timestamp}\"\n            self.backup_dir.mkdir(parents=True, exist_ok=True)\n            shutil.copytree(self.deploy_dir, backup_path)\n            print(f\"‚úì Backup created: {backup_path}\")\n    \n    def build_application(self):\n        \"\"\"Build the application for deployment\"\"\"\n        print(\"Building application...\")\n        \n        # Clean deploy directory\n        if self.deploy_dir.exists():\n            shutil.rmtree(self.deploy_dir)\n        self.deploy_dir.mkdir(parents=True)\n        \n        # Copy application files\n        shutil.copytree(\"src\", self.deploy_dir / \"src\")\n        shutil.copytree(\"assets\", self.deploy_dir / \"assets\")\n        \n        # Copy configuration\n        for config_file in [\"requirements.txt\", \"config.example.json\", \"README.md\"]:\n            if Path(config_file).exists():\n                shutil.copy2(config_file, self.deploy_dir / config_file)\n        \n        # Create environment-specific config\n        config_content = \"\"\"\n# Deployment Configuration\nENVIRONMENT={environment}\nBUILD_DATE={timestamp}\nGAME_TITLE=\"Snake Game ({environment})\"\n\"\"\".format(environment=self.environment, timestamp=self.timestamp)\n        \n        with open(self.deploy_dir / \".env\", \"w\") as f:\n            f.write(config_content)\n    \n    def generate_deployment_scripts(self):\n        \"\"\"Generate deployment and startup scripts\"\"\"\n        \n        # Startup script for Linux/Mac\n        startup_script = \"\"\"#!/bin/bash\n# Snake Game Startup Script\n\necho \"Starting Snake Game...\"\n\n# Set environment variables\nif [ -f \".env\" ]; then\n    export $(cat .env | grep -v '^#' | xargs)\nfi\n\n# Create necessary directories\nmkdir -p logs\nmkdir -p data\n\n# Install dependencies if needed\nif [ ! -d \"venv\" ]; then\n    echo \"Setting up virtual environment...\"\n    python3 -m venv venv\n    source venv/bin/activate\n    pip install -r requirements.txt\nelse\n    source venv/bin/activate\nfi\n\n# Start the game\necho \"Launching Snake Game in $ENVIRONMENT mode...\"\npython -m src.game.game\n\n# If game exits, show message\necho \"Game ended. Press Enter to close...\"\nread\n\"\"\"\n        \n        with open(self.deploy_dir / \"start.sh\", \"w\") as f:\n            f.write(startup_script)\n        os.chmod(self.deploy_dir / \"start.sh\", 0o755)\n        \n        # Windows batch file\n        batch_script = \"\"\"@echo off\nREM Snake Game Startup Script for Windows\n\necho Starting Snake Game...\n\nREM Create necessary directories\nif not exist logs mkdir logs\nif not exist data mkdir data\n\nREM Install dependencies if needed\nif not exist venv (\n    echo Setting up virtual environment...\n    python -m venv venv\n    call venv\\\\Scripts\\\\activate.bat\n    pip install -r requirements.txt\n) else (\n    call venv\\\\Scripts\\\\activate.bat\n)\n\nREM Start the game\necho Launching Snake Game...\npython -m src.game.game\n\nREM If game exits, show message\necho Game ended. Press any key to close...\npause > nul\n\"\"\"\n        \n        with open(self.deploy_dir / \"start.bat\", \"w\") as f:\n            f.write(batch_script)\n    \n    def create_docker_deployment(self):\n        \"\"\"Create Docker-based deployment\"\"\"\n        print(\"Creating Docker deployment...\")\n        \n        dockerfile_content = \"\"\"FROM python:3.9-slim\n\nWORKDIR /app\n\n# Install system dependencies for pygame\nRUN apt-get update && apt-get install -y \\\\\n    libsdl2-2.0-0 \\\\\n    libsdl2-image-2.0-0 \\\\\n    libsdl2-mixer-2.0-0 \\\\\n    libsdl2-ttf-2.0-0 \\\\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy application\nCOPY . .\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Create non-root user\nRUN useradd --create-home --shell /bin/bash app\nUSER app\n\n# Create data volume\nVOLUME [\"/app/data\"]\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\\\n    CMD python -c \"import pygame; pygame.init(); pygame.quit()\" || exit 1\n\n# Start the game\nCMD [\"python\", \"-m\", \"src.game.game\"]\n\"\"\"\n        \n        with open(self.deploy_dir / \"Dockerfile\", \"w\") as f:\n            f.write(dockerfile_content)\n        \n        # Docker compose for easy deployment\n        compose_content = \"\"\"version: '3.8'\n\nservices:\n  snake-game:\n    build: .\n    container_name: snake-game\n    volumes:\n      - game_data:/app/data\n    ports:\n      - \"8080:8080\"\n    environment:\n      - ENVIRONMENT=production\n    restart: unless-stopped\n\nvolumes:\n  game_data:\n\"\"\"\n        \n        with open(self.deploy_dir / \"docker-compose.yml\", \"w\") as f:\n            f.write(compose_content)\n    \n    def run_smoke_tests(self):\n        \"\"\"Run smoke tests on deployed application\"\"\"\n        print(\"Running smoke tests...\")\n        \n        # Test Python imports\n        test_script = \"\"\"\nimport sys\nimport os\nsys.path.append('src')\n\ntry:\n    import pygame\n    from game.game import Game\n    from game.snake import Snake\n    print(\"‚úì All imports successful\")\n    \n    # Test basic initialization\n    pygame.init()\n    pygame.quit()\n    print(\"‚úì Pygame initialized successfully\")\n    \n    # Test game components\n    snake = Snake()\n    print(f\"‚úì Snake initialized with {len(snake.body)} segments\")\n    \n    print(\"‚úì Smoke tests passed\")\n    sys.exit(0)\nexcept Exception as e:\n    print(f\"‚úó Smoke test failed: {e}\")\n    sys.exit(1)\n\"\"\"\n        \n        test_file = self.deploy_dir / \"smoke_test.py\"\n        with open(test_file, \"w\") as f:\n            f.write(test_script)\n        \n        result = subprocess.run(\n            [\"python\", str(test_file)],\n            cwd=self.deploy_dir,\n            capture_output=True,\n            text=True\n        )\n        \n        test_file.unlink()  # Clean up\n        \n        if result.returncode == 0:\n            print(\"‚úì Smoke tests passed\")\n            return True\n        else:\n            print(f\"‚úó Smoke tests failed: {result.stdout}\")\n            return False\n    \n    def create_deployment_package(self):\n        \"\"\"Create deployment package\"\"\"\n        print(\"Creating deployment package...\")\n        \n        package_name = f\"snake-game-{self.environment}-{self.timestamp}\"\n        package_path = Path(\"dist\") / package_name\n        \n        shutil.make_archive(\n            str(package_path),\n            'zip',\n            self.deploy_dir.parent,\n            self.deploy_dir.name\n        )\n        \n        print(f\"‚úì Deployment package created: {package_path}.zip\")\n        return package_path\n    \n    def deploy(self):\n        \"\"\"Execute full deployment process\"\"\"\n        print(f\"Starting deployment to {self.environment}...\")\n        \n        try:\n            self.create_backup()\n            self.build_application()\n            self.generate_deployment_scripts()\n            self.create_docker_deployment()\n            \n            if not self.run_smoke_tests():\n                print(\"‚úó Deployment failed: Smoke tests did not pass\")\n                return False\n            \n            package_path = self.create_deployment_package()\n            \n            print(\"\\n\" + \"=\"*50)\n            print(\"DEPLOYMENT SUCCESSFUL!\")\n            print(\"=\"*50)\n            print(f\"Environment: {self.environment}\")\n            print(f\"Build: {self.timestamp}\")\n            print(f\"Package: {package_path}.zip\")\n            print(f\"Deployment directory: {self.deploy_dir}\")\n            print(\"\\nNext steps:\")\n            print(\"1. Distribute the deployment package\")\n            print(\"2. Extract and run start.sh (Linux/Mac) or start.bat (Windows)\")\n            print(\"3. Or use docker-compose up -d for container deployment\")\n            print(\"=\"*50)\n            \n            return True\n            \n        except Exception as e:\n            print(f\"‚úó Deployment failed: {e}\")\n            return False\n\nif __name__ == \"__main__\":\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Deploy Snake Game')\n    parser.add_argument('--environment', default='production', \n                       choices=['development', 'staging', 'production'],\n                       help='Deployment environment')\n    \n    args = parser.parse_args()\n    \n    deployer = DeploymentManager(args.environment)\n    success = deployer.deploy()\n    sys.exit(0 if success else 1)\nEOF\n\n# Run deployment\npython scripts/deploy.py --environment production",
                    feedback: "‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–ø–ª–æ—è —Å–æ–∑–¥–∞–Ω–∞",
                    story: "üöÄ –û—Ç–ª–∏—á–Ω–æ! –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –∏ deployment!",
                    score: 2,
                    type: "success",
                    architecture: {
                        "scripts/deploy.py": "#!/usr/bin/env python3\nimport os\nimport shutil\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom datetime import datetime\n\nclass DeploymentManager:\n    def __init__(self, environment='production'):\n        self.environment = environment\n        self.deploy_dir = Path(f\"deploy/{environment}\")\n        self.backup_dir = Path(\"deploy/backups\")\n        self.timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    \n    def create_backup(self):\n        \"\"\"Create backup of previous deployment\"\"\"\n        if self.deploy_dir.exists():\n            backup_path = self.backup_dir / f\"backup_{self.timestamp}\"\n            self.backup_dir.mkdir(parents=True, exist_ok=True)\n            shutil.copytree(self.deploy_dir, backup_path)\n            print(f\"‚úì Backup created: {backup_path}\")\n    \n    def build_application(self):\n        \"\"\"Build the application for deployment\"\"\"\n        print(\"Building application...\")\n        \n        # Clean deploy directory\n        if self.deploy_dir.exists():\n            shutil.rmtree(self.deploy_dir)\n        self.deploy_dir.mkdir(parents=True)\n        \n        # Copy application files\n        shutil.copytree(\"src\", self.deploy_dir / \"src\")\n        shutil.copytree(\"assets\", self.deploy_dir / \"assets\")\n        \n        # Copy configuration\n        for config_file in [\"requirements.txt\", \"config.example.json\", \"README.md\"]:\n            if Path(config_file).exists():\n                shutil.copy2(config_file, self.deploy_dir / config_file)\n        \n        # Create environment-specific config\n        config_content = \"\"\"\n# Deployment Configuration\nENVIRONMENT={environment}\nBUILD_DATE={timestamp}\nGAME_TITLE=\"Snake Game ({environment})\"\n\"\"\".format(environment=self.environment, timestamp=self.timestamp)\n        \n        with open(self.deploy_dir / \".env\", \"w\") as f:\n            f.write(config_content)\n    \n    def generate_deployment_scripts(self):\n        \"\"\"Generate deployment and startup scripts\"\"\"\n        \n        # Startup script for Linux/Mac\n        startup_script = \"\"\"#!/bin/bash\n# Snake Game Startup Script\n\necho \"Starting Snake Game...\"\n\n# Set environment variables\nif [ -f \".env\" ]; then\n    export $(cat .env | grep -v '^#' | xargs)\nfi\n\n# Create necessary directories\nmkdir -p logs\nmkdir -p data\n\n# Install dependencies if needed\nif [ ! -d \"venv\" ]; then\n    echo \"Setting up virtual environment...\"\n    python3 -m venv venv\n    source venv/bin/activate\n    pip install -r requirements.txt\nelse\n    source venv/bin/activate\nfi\n\n# Start the game\necho \"Launching Snake Game in $ENVIRONMENT mode...\"\npython -m src.game.game\n\n# If game exits, show message\necho \"Game ended. Press Enter to close...\"\nread\n\"\"\"\n        \n        with open(self.deploy_dir / \"start.sh\", \"w\") as f:\n            f.write(startup_script)\n        os.chmod(self.deploy_dir / \"start.sh\", 0o755)\n        \n        # Windows batch file\n        batch_script = \"\"\"@echo off\nREM Snake Game Startup Script for Windows\n\necho Starting Snake Game...\n\nREM Create necessary directories\nif not exist logs mkdir logs\nif not exist data mkdir data\n\nREM Install dependencies if needed\nif not exist venv (\n    echo Setting up virtual environment...\n    python -m venv venv\n    call venv\\\\Scripts\\\\activate.bat\n    pip install -r requirements.txt\n) else (\n    call venv\\\\Scripts\\\\activate.bat\n)\n\nREM Start the game\necho Launching Snake Game...\npython -m src.game.game\n\nREM If game exits, show message\necho Game ended. Press any key to close...\npause > nul\n\"\"\"\n        \n        with open(self.deploy_dir / \"start.bat\", \"w\") as f:\n            f.write(batch_script)\n    \n    def create_docker_deployment(self):\n        \"\"\"Create Docker-based deployment\"\"\"\n        print(\"Creating Docker deployment...\")\n        \n        dockerfile_content = \"\"\"FROM python:3.9-slim\n\nWORKDIR /app\n\n# Install system dependencies for pygame\nRUN apt-get update && apt-get install -y \\\\\n    libsdl2-2.0-0 \\\\\n    libsdl2-image-2.0-0 \\\\\n    libsdl2-mixer-2.0-0 \\\\\n    libsdl2-ttf-2.0-0 \\\\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy application\nCOPY . .\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Create non-root user\nRUN useradd --create-home --shell /bin/bash app\nUSER app\n\n# Create data volume\nVOLUME [\"/app/data\"]\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\\\n    CMD python -c \"import pygame; pygame.init(); pygame.quit()\" || exit 1\n\n# Start the game\nCMD [\"python\", \"-m\", \"src.game.game\"]\n\"\"\"\n        \n        with open(self.deploy_dir / \"Dockerfile\", \"w\") as f:\n            f.write(dockerfile_content)\n        \n        # Docker compose for easy deployment\n        compose_content = \"\"\"version: '3.8'\n\nservices:\n  snake-game:\n    build: .\n    container_name: snake-game\n    volumes:\n      - game_data:/app/data\n    ports:\n      - \"8080:8080\"\n    environment:\n      - ENVIRONMENT=production\n    restart: unless-stopped\n\nvolumes:\n  game_data:\n\"\"\"\n        \n        with open(self.deploy_dir / \"docker-compose.yml\", \"w\") as f:\n            f.write(compose_content)\n    \n    def run_smoke_tests(self):\n        \"\"\"Run smoke tests on deployed application\"\"\"\n        print(\"Running smoke tests...\")\n        \n        # Test Python imports\n        test_script = \"\"\"\nimport sys\nimport os\nsys.path.append('src')\n\ntry:\n    import pygame\n    from game.game import Game\n    from game.snake import Snake\n    print(\"‚úì All imports successful\")\n    \n    # Test basic initialization\n    pygame.init()\n    pygame.quit()\n    print(\"‚úì Pygame initialized successfully\")\n    \n    # Test game components\n    snake = Snake()\n    print(f\"‚úì Snake initialized with {len(snake.body)} segments\")\n    \n    print(\"‚úì Smoke tests passed\")\n    sys.exit(0)\nexcept Exception as e:\n    print(f\"‚úó Smoke test failed: {e}\")\n    sys.exit(1)\n\"\"\"\n        \n        test_file = self.deploy_dir / \"smoke_test.py\"\n        with open(test_file, \"w\") as f:\n            f.write(test_script)\n        \n        result = subprocess.run(\n            [\"python\", str(test_file)],\n            cwd=self.deploy_dir,\n            capture_output=True,\n            text=True\n        )\n        \n        test_file.unlink()  # Clean up\n        \n        if result.returncode == 0:\n            print(\"‚úì Smoke tests passed\")\n            return True\n        else:\n            print(f\"‚úó Smoke tests failed: {result.stdout}\")\n            return False\n    \n    def create_deployment_package(self):\n        \"\"\"Create deployment package\"\"\"\n        print(\"Creating deployment package...\")\n        \n        package_name = f\"snake-game-{self.environment}-{self.timestamp}\"\n        package_path = Path(\"dist\") / package_name\n        \n        shutil.make_archive(\n            str(package_path),\n            'zip',\n            self.deploy_dir.parent,\n            self.deploy_dir.name\n        )\n        \n        print(f\"‚úì Deployment package created: {package_path}.zip\")\n        return package_path\n    \n    def deploy(self):\n        \"\"\"Execute full deployment process\"\"\"\n        print(f\"Starting deployment to {self.environment}...\")\n        \n        try:\n            self.create_backup()\n            self.build_application()\n            self.generate_deployment_scripts()\n            self.create_docker_deployment()\n            \n            if not self.run_smoke_tests():\n                print(\"‚úó Deployment failed: Smoke tests did not pass\")\n                return False\n            \n            package_path = self.create_deployment_package()\n            \n            print(\"\\n\" + \"=\"*50)\n            print(\"DEPLOYMENT SUCCESSFUL!\")\n            print(\"=\"*50)\n            print(f\"Environment: {self.environment}\")\n            print(f\"Build: {self.timestamp}\")\n            print(f\"Package: {package_path}.zip\")\n            print(f\"Deployment directory: {self.deploy_dir}\")\n            print(\"\\nNext steps:\")\n            print(\"1. Distribute the deployment package\")\n            print(\"2. Extract and run start.sh (Linux/Mac) or start.bat (Windows)\")\n            print(\"3. Or use docker-compose up -d for container deployment\")\n            print(\"=\"*50)\n            \n            return True\n            \n        except Exception as e:\n            print(f\"‚úó Deployment failed: {e}\")\n            return False\n\nif __name__ == \"__main__\":\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Deploy Snake Game')\n    parser.add_argument('--environment', default='production', \n                       choices=['development', 'staging', 'production'],\n                       help='Deployment environment')\n    \n    args = parser.parse_args()\n    \n    deployer = DeploymentManager(args.environment)\n    success = deployer.deploy()\n    sys.exit(0 if success else 1)"
                    }
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–æ–π –¥–µ–ø–ª–æ–π –ø–∞–∫–µ—Ç",
                    command: "./build.sh\necho \"Game ready for distribution!\"\nls -la build/",
                    feedback: "‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π –¥–µ–ø–ª–æ–π –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω",
                    story: "üöÄ –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–†—É—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
                    command: "mkdir -p deploy\ncp -r src/ deploy/\ncp -r assets/ deploy/\ncp requirements.txt deploy/",
                    feedback: "‚ùå –†—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω",
                    story: "üëê –†—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π –ø–æ–¥–≤–µ—Ä–∂–µ–Ω –æ—à–∏–±–∫–∞–º!",
                    score: 0,
                    type: "error",
                    mistakes: { architecture: 1 }
                },
                {
                    text: "–ë–µ–∑ –¥–µ–ø–ª–æ—è - –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∫–∞–∫ –µ—Å—Ç—å",
                    command: "echo '# –î–µ–ø–ª–æ–π –Ω–µ –Ω—É–∂–µ–Ω' > deploy_notes.txt",
                    feedback: "‚ùå –î–µ–ø–ª–æ–π –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω",
                    story: "üíÄ –ë–µ–∑ –¥–µ–ø–ª–æ—è —Å–ª–æ–∂–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –∏–≥—Ä—É!",
                    score: -1,
                    type: "error",
                    mistakes: { architecture: 2 }
                }
            ]
        },
        {
            id: 30,
            title: "üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            description: "–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ - —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.",
            question: "–ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?",
            terminal: "(venv) dev@ubuntu:~/snake-game$ ",
            options: [
                {
                    text: "–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞",
                    command: "cat > PROJECT_COMPLETION.md << 'EOF'\n# üéÆ Snake Game - Project Completion Report\n\n## üìä Project Summary\n\n### üéØ Project Overview\n- **Project**: Classic Snake Game\n- **Technology Stack**: Python, Pygame, Modern Development Practices\n- **Duration**: Full development lifecycle\n- **Status**: ‚úÖ COMPLETED SUCCESSFULLY\n\n### üèÜ Key Achievements\n\n#### üéØ Planning & Architecture (Steps 1-6)\n- ‚úÖ Comprehensive project planning and requirements documentation\n- ‚úÖ Modular project structure with clear separation of concerns\n- ‚úÖ Virtual environment and dependency management\n- ‚úÖ Version control with Git and proper .gitignore\n- ‚úÖ Professional architecture design with UML documentation\n\n#### üíª Core Development (Steps 7-15)\n- ‚úÖ Robust game engine with clean game loop architecture\n- ‚úÖ Advanced Snake class with intelligent movement and collision prevention\n- ‚úÖ Smart Food generation with position validation\n- ‚úÖ Comprehensive collision detection system\n- ‚úÖ Professional UI with score display and animations\n- ‚úÖ Audio system with sound effects and music\n- ‚úÖ Persistent high score system with JSON storage\n- ‚úÖ State-based menu system with smooth transitions\n\n#### üß™ Quality Assurance (Steps 16-24)\n- ‚úÖ Comprehensive unit and integration testing suite\n- ‚úÖ Performance profiling and optimization\n- ‚úÖ Docker containerization for consistent deployment\n- ‚úÖ CI/CD pipeline with automated testing\n- ‚úÖ Professional documentation and API reference\n- ‚úÖ Configuration management system\n- ‚úÖ Advanced graphics with sprite animations\n- ‚úÖ Detailed logging system with rotation\n- ‚úÖ State machine for clean game state management\n\n#### üöÄ Production Ready (Steps 25-30)\n- ‚úÖ Automated build system with versioning\n- ‚úÖ Comprehensive final testing and validation\n- ‚úÖ Code quality analysis with multiple tools\n- ‚úÖ Security scanning and vulnerability assessment\n- ‚úÖ Automated deployment system with multiple environments\n- ‚úÖ Project completion documentation\n\n### üìà Technical Metrics\n\n```\nCode Quality:\n- Lines of Code: ~2,500\n- Test Coverage: >90%\n- Code Quality Score: >9.0/10\n- Security Issues: 0\n- Dependencies: 5 (Pygame + testing tools)\n\nArchitecture:\n- Modules: 15+\n- Classes: 20+\n- Test Cases: 50+\n- Configuration Options: 25+\n```\n\n### üéì Skills Demonstrated\n\n#### Technical Skills\n- **Python Programming**: Advanced OOP, design patterns, async programming\n- **Game Development**: Game loops, collision detection, sprite management\n- **Software Architecture**: Modular design, separation of concerns, design patterns\n- **Testing**: Unit tests, integration tests, performance testing\n- **DevOps**: Docker, CI/CD, deployment automation\n- **Security**: Code scanning, vulnerability assessment\n- **Documentation**: API docs, user guides, technical specifications\n\n#### Professional Skills\n- **Project Management**: Full lifecycle development, milestone tracking\n- **Quality Assurance**: Test-driven development, code reviews\n- **Deployment**: Production deployment, environment management\n- **Collaboration**: Version control, code standards, team workflows\n\n### üöÄ Deployment Ready\n\nThe project is fully prepared for distribution with multiple deployment options:\n\n1. **Standalone Package**: ZIP archive with startup scripts\n2. **Docker Container**: Containerized deployment\n3. **Source Distribution**: Full source code with build instructions\n\n### üìö Documentation Complete\n\n- ‚úÖ README.md - User documentation and quick start\n- ‚úÖ API Reference - Complete code documentation\n- ‚úÖ Architecture Docs - System design and components\n- ‚úÖ Deployment Guide - Production deployment instructions\n- ‚úÖ Development Guide - Contributor documentation\n\n### üîÆ Future Enhancements\n\nPotential areas for future development:\n- Multiplayer support over network\n- Mobile version (iOS/Android)\n- Level editor and custom maps\n- Power-ups and special abilities\n- Online leaderboards\n- Theme customization\n\n### üéâ Conclusion\n\nThis project successfully demonstrates a complete game development lifecycle from concept to production-ready deployment. The Snake Game implementation showcases professional software engineering practices, modern development workflows, and production-quality code standards.\n\n**Project Status: üèÜ COMPLETED SUCCESSFULLY**\n\n---\n*Project completed on: $(date)*\n*Total development steps: 30*\n*Final score: [Calculated based on player choices]*\nEOF\n\n# Create final project structure overview\ncat > PROJECT_STRUCTURE.md << 'EOF'\n# Project Structure Overview\n\n```\nsnake-game/\n‚îú‚îÄ‚îÄ üìÅ src/                    # Source code\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ game/              # Core game logic\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ game.py          # Main game class\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ snake.py         # Snake behavior\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ food.py          # Food generation\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ collision.py     # Collision detection\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.py          # Menu system\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ states.py        # State machine\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ core.py          # Game core logic\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ graphics/          # Graphics system\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sprite_manager.py # Sprite and animation management\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/             # Utilities\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ audio.py         # Audio management\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ scores.py        # High score system\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger.py        # Logging system\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ profiler.py      # Performance profiling\n‚îÇ   ‚îî‚îÄ‚îÄ config.py            # Configuration management\n‚îú‚îÄ‚îÄ üìÅ assets/                # Game assets\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ sounds/           # Audio files\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ images/           # Image assets\n‚îÇ   ‚îî‚îÄ‚îÄ üìÅ graphics/         # Sprite sheets\n‚îú‚îÄ‚îÄ üìÅ tests/                 # Test suite\n‚îÇ   ‚îú‚îÄ‚îÄ test_snake.py        # Snake tests\n‚îÇ   ‚îú‚îÄ‚îÄ test_integration.py  # Integration tests\n‚îÇ   ‚îî‚îÄ‚îÄ test_performance.py  # Performance tests\n‚îú‚îÄ‚îÄ üìÅ scripts/               # Build and deployment scripts\n‚îÇ   ‚îú‚îÄ‚îÄ build_release.py     # Release builder\n‚îÇ   ‚îú‚îÄ‚îÄ deploy.py            # Deployment manager\n‚îÇ   ‚îú‚îÄ‚îÄ code_analysis.py     # Code quality analysis\n‚îÇ   ‚îî‚îÄ‚îÄ security_scan.py     # Security scanner\n‚îú‚îÄ‚îÄ üìÅ docs/                  # Documentation\n‚îÇ   ‚îú‚îÄ‚îÄ architecture.md      # Architecture documentation\n‚îÇ   ‚îî‚îÄ‚îÄ api_reference.md     # API reference\n‚îú‚îÄ‚îÄ üìÅ deploy/                # Deployment packages\n‚îÇ   ‚îî‚îÄ‚îÄ üìÅ production/       # Production deployment\n‚îú‚îÄ‚îÄ .github/workflows/       # CI/CD pipelines\n‚îú‚îÄ‚îÄ Dockerfile               # Container definition\n‚îú‚îÄ‚îÄ docker-compose.yml       # Container orchestration\n‚îú‚îÄ‚îÄ requirements.txt         # Python dependencies\n‚îú‚îÄ‚îÄ pyproject.toml          # Project metadata\n‚îú‚îÄ‚îÄ README.md               # Project documentation\n‚îî‚îÄ‚îÄ PROJECT_COMPLETION.md   # This completion report\n```\n\n## File Count Summary\n- Source Files: 15+\n- Test Files: 10+\n- Script Files: 8+\n- Documentation Files: 10+\n- Configuration Files: 5+\n- Total Files: 50+\nEOF\n\n# Final celebration message\necho \"üéâ PROJECT COMPLETED SUCCESSFULLY!\"\necho \"üèÜ You have built a professional-grade Snake Game from scratch!\"\necho \"üìä Check PROJECT_COMPLETION.md for full project summary\"\necho \"üöÄ Your game is ready for distribution and production use!\"",
                    feedback: "‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π!",
                    story: "üèÜ –ü–û–¢–†–Ø–°–ê–Æ–©–ï! –í—ã —Å–æ–∑–¥–∞–ª–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∏–≥—Ä—É —Å –Ω—É–ª—è! –û—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —Ä–µ–ª–∏–∑–∞ - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! üéØüöÄ\n\n–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚úÖ –ß–∏—Å—Ç—ã–π, —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∫–æ–¥ —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏\n‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ CI/CD\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production deployment\n\n–í—ã –ø—Ä–æ—à–ª–∏ –≤–µ—Å—å –ø—É—Ç—å –æ—Ç –∏–¥–µ–∏ –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞! üéÆ",
                    score: 2,
                    type: "success",
                    architecture: {
                        "PROJECT_COMPLETION.md": "# üéÆ Snake Game - Project Completion Report\n\n## üìä Project Summary\n\n### üéØ Project Overview\n- **Project**: Classic Snake Game\n- **Technology Stack**: Python, Pygame, Modern Development Practices\n- **Duration**: Full development lifecycle\n- **Status**: ‚úÖ COMPLETED SUCCESSFULLY\n\n### üèÜ Key Achievements\n\n#### üéØ Planning & Architecture (Steps 1-6)\n- ‚úÖ Comprehensive project planning and requirements documentation\n- ‚úÖ Modular project structure with clear separation of concerns\n- ‚úÖ Virtual environment and dependency management\n- ‚úÖ Version control with Git and proper .gitignore\n- ‚úÖ Professional architecture design with UML documentation\n\n#### üíª Core Development (Steps 7-15)\n- ‚úÖ Robust game engine with clean game loop architecture\n- ‚úÖ Advanced Snake class with intelligent movement and collision prevention\n- ‚úÖ Smart Food generation with position validation\n- ‚úÖ Comprehensive collision detection system\n- ‚úÖ Professional UI with score display and animations\n- ‚úÖ Audio system with sound effects and music\n- ‚úÖ Persistent high score system with JSON storage\n- ‚úÖ State-based menu system with smooth transitions\n\n#### üß™ Quality Assurance (Steps 16-24)\n- ‚úÖ Comprehensive unit and integration testing suite\n- ‚úÖ Performance profiling and optimization\n- ‚úÖ Docker containerization for consistent deployment\n- ‚úÖ CI/CD pipeline with automated testing\n- ‚úÖ Professional documentation and API reference\n- ‚úÖ Configuration management system\n- ‚úÖ Advanced graphics with sprite animations\n- ‚úÖ Detailed logging system with rotation\n- ‚úÖ State machine for clean game state management\n\n#### üöÄ Production Ready (Steps 25-30)\n- ‚úÖ Automated build system with versioning\n- ‚úÖ Comprehensive final testing and validation\n- ‚úÖ Code quality analysis with multiple tools\n- ‚úÖ Security scanning and vulnerability assessment\n- ‚úÖ Automated deployment system with multiple environments\n- ‚úÖ Project completion documentation\n\n### üìà Technical Metrics\n\n```\nCode Quality:\n- Lines of Code: ~2,500\n- Test Coverage: >90%\n- Code Quality Score: >9.0/10\n- Security Issues: 0\n- Dependencies: 5 (Pygame + testing tools)\n\nArchitecture:\n- Modules: 15+\n- Classes: 20+\n- Test Cases: 50+\n- Configuration Options: 25+\n```\n\n### üéì Skills Demonstrated\n\n#### Technical Skills\n- **Python Programming**: Advanced OOP, design patterns, async programming\n- **Game Development**: Game loops, collision detection, sprite management\n- **Software Architecture**: Modular design, separation of concerns, design patterns\n- **Testing**: Unit tests, integration tests, performance testing\n- **DevOps**: Docker, CI/CD, deployment automation\n- **Security**: Code scanning, vulnerability assessment\n- **Documentation**: API docs, user guides, technical specifications\n\n#### Professional Skills\n- **Project Management**: Full lifecycle development, milestone tracking\n- **Quality Assurance**: Test-driven development, code reviews\n- **Deployment**: Production deployment, environment management\n- **Collaboration**: Version control, code standards, team workflows\n\n### üöÄ Deployment Ready\n\nThe project is fully prepared for distribution with multiple deployment options:\n\n1. **Standalone Package**: ZIP archive with startup scripts\n2. **Docker Container**: Containerized deployment\n3. **Source Distribution**: Full source code with build instructions\n\n### üìö Documentation Complete\n\n- ‚úÖ README.md - User documentation and quick start\n- ‚úÖ API Reference - Complete code documentation\n- ‚úÖ Architecture Docs - System design and components\n- ‚úÖ Deployment Guide - Production deployment instructions\n- ‚úÖ Development Guide - Contributor documentation\n\n### üîÆ Future Enhancements\n\nPotential areas for future development:\n- Multiplayer support over network\n- Mobile version (iOS/Android)\n- Level editor and custom maps\n- Power-ups and special abilities\n- Online leaderboards\n- Theme customization\n\n### üéâ Conclusion\n\nThis project successfully demonstrates a complete game development lifecycle from concept to production-ready deployment. The Snake Game implementation showcases professional software engineering practices, modern development workflows, and production-quality code standards.\n\n**Project Status: üèÜ COMPLETED SUCCESSFULLY**\n\n---\n*Project completed on: $(date)*\n*Total development steps: 30*\n*Final score: [Calculated based on player choices]*",
                        "PROJECT_STRUCTURE.md": "# Project Structure Overview\n\n```\nsnake-game/\n‚îú‚îÄ‚îÄ üìÅ src/                    # Source code\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ game/              # Core game logic\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ game.py          # Main game class\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ snake.py         # Snake behavior\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ food.py          # Food generation\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ collision.py     # Collision detection\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.py          # Menu system\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ states.py        # State machine\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ core.py          # Game core logic\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ graphics/          # Graphics system\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sprite_manager.py # Sprite and animation management\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/             # Utilities\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ audio.py         # Audio management\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ scores.py        # High score system\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger.py        # Logging system\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ profiler.py      # Performance profiling\n‚îÇ   ‚îî‚îÄ‚îÄ config.py            # Configuration management\n‚îú‚îÄ‚îÄ üìÅ assets/                # Game assets\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ sounds/           # Audio files\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ images/           # Image assets\n‚îÇ   ‚îî‚îÄ‚îÄ üìÅ graphics/         # Sprite sheets\n‚îú‚îÄ‚îÄ üìÅ tests/                 # Test suite\n‚îÇ   ‚îú‚îÄ‚îÄ test_snake.py        # Snake tests\n‚îÇ   ‚îú‚îÄ‚îÄ test_integration.py  # Integration tests\n‚îÇ   ‚îî‚îÄ‚îÄ test_performance.py  # Performance tests\n‚îú‚îÄ‚îÄ üìÅ scripts/               # Build and deployment scripts\n‚îÇ   ‚îú‚îÄ‚îÄ build_release.py     # Release builder\n‚îÇ   ‚îú‚îÄ‚îÄ deploy.py            # Deployment manager\n‚îÇ   ‚îú‚îÄ‚îÄ code_analysis.py     # Code quality analysis\n‚îÇ   ‚îî‚îÄ‚îÄ security_scan.py     # Security scanner\n‚îú‚îÄ‚îÄ üìÅ docs/                  # Documentation\n‚îÇ   ‚îú‚îÄ‚îÄ architecture.md      # Architecture documentation\n‚îÇ   ‚îî‚îÄ‚îÄ api_reference.md     # API reference\n‚îú‚îÄ‚îÄ üìÅ deploy/                # Deployment packages\n‚îÇ   ‚îî‚îÄ‚îÄ üìÅ production/       # Production deployment\n‚îú‚îÄ‚îÄ .github/workflows/       # CI/CD pipelines\n‚îú‚îÄ‚îÄ Dockerfile               # Container definition\n‚îú‚îÄ‚îÄ docker-compose.yml       # Container orchestration\n‚îú‚îÄ‚îÄ requirements.txt         # Python dependencies\n‚îú‚îÄ‚îÄ pyproject.toml          # Project metadata\n‚îú‚îÄ‚îÄ README.md               # Project documentation\n‚îî‚îÄ‚îÄ PROJECT_COMPLETION.md   # This completion report\n```\n\n## File Count Summary\n- Source Files: 15+\n- Test Files: 10+\n- Script Files: 8+\n- Documentation Files: 10+\n- Configuration Files: 5+\n- Total Files: 50+"
                    }
                },
                {
                    text: "–ë–∞–∑–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                    command: "echo 'Project completed!' > completion.txt\nls -la",
                    feedback: "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –±–∞–∑–æ–≤–æ",
                    story: "üèÜ –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏!",
                    score: 1,
                    type: "warning"
                },
                {
                    text: "–ü—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
                    command: "echo 'Done'",
                    feedback: "‚ùå –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
                    story: "üìù –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                    score: 0,
                    type: "error",
                    mistakes: { planning: 1 }
                },
                {
                    text: "–ë—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–ª–ø—É—Ç–∏",
                    command: "echo 'Project abandoned' > abandoned.txt",
                    feedback: "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω",
                    story: "üíÄ –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç - –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —É—Å–∏–ª–∏—è!",
                    score: -1,
                    type: "error",
                    mistakes: { planning: 2 }
                }
            ]
        }
    ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
function showCompletionScreen() {
    const totalScore = calculateTotalScore();
    const mistakes = calculateTotalMistakes();
    const grade = calculateGrade(totalScore, mistakes);
    
    return {
        title: "üèÜ –ü–†–û–ï–ö–¢ –ó–ê–í–ï–†–®–ï–ù!",
        content: `
<div class="completion-screen">
    <div class="completion-header">
        <h1>üéÆ Snake Game Development Complete! üéÆ</h1>
        <p>–í—ã –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã –æ—Ç –∏–¥–µ–∏ –¥–æ production!</p>
    </div>
    
    <div class="completion-stats">
        <div class="stat-card">
            <h3>üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç</h3>
            <div class="score">${totalScore} / 60</div>
        </div>
        
        <div class="stat-card">
            <h3>üèÖ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</h3>
            <div class="grade">${grade}</div>
        </div>
        
        <div class="stat-card">
            <h3>‚ö° –û—à–∏–±–æ–∫ –¥–æ–ø—É—â–µ–Ω–æ</h3>
            <div class="mistakes">${mistakes}</div>
        </div>
    </div>
    
    <div class="completion-details">
        <h3>üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h3>
        <ul>
            <li>‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –¥–µ–ø–ª–æ—è</li>
            <li>‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</li>
            <li>‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ CI/CD</li>
            <li>‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</li>
            <li>‚úÖ Production-ready deployment</li>
        </ul>
        
        <h3>üöÄ –ß—Ç–æ –≤—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏:</h3>
        <ul>
            <li>üéÆ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É Snake —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Ñ–∏—á–∞–º–∏</li>
            <li>üèóÔ∏è –ú–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å 15+ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏</li>
            <li>üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
            <li>üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–±–æ—Ä–∫—É –∏ –¥–µ–ø–ª–æ–π</li>
            <li>üìö –ü–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞</li>
        </ul>
    </div>
    
    <div class="completion-actions">
        <button onclick="restartGame()">üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
        <button onclick="viewProjectSummary()">üìä –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞</button>
        <button onclick="shareResults()">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏</button>
    </div>
</div>
        `
    };
}